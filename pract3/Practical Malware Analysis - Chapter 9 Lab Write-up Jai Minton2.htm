<!DOCTYPE html>
<!--
  Minimal Mistakes Jekyll Theme 4.15.2 by Michael Rose
  Copyright 2013-2019 Michael Rose - mademistakes.com | @mmistakes
  Free for personal and commercial use under the MIT license
  https://github.com/mmistakes/minimal-mistakes/blob/master/LICENSE
-->
<html lang="en" class="js fontawesome-i2svg-active fontawesome-i2svg-complete"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
    <meta charset="utf-8">

<!-- begin _includes/seo.html --><title>Practical Malware Analysis - Chapter 9 Lab Write-up : Jai Minton</title>
<meta name="description" content="This details reverse engineering activities and answers for labs contained in the book ‘Practical Malware Analysis’ by Michael Sikorski and Andrew Honig, which is published by No Starch Press.">



<meta property="og:type" content="article">
<meta property="og:locale" content="en_US">
<meta property="og:site_name" content="Jai Minton">
<meta property="og:title" content="Practical Malware Analysis - Chapter 9 Lab Write-up">
<meta property="og:url" content="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter9/">


  <meta property="og:description" content="This details reverse engineering activities and answers for labs contained in the book ‘Practical Malware Analysis’ by Michael Sikorski and Andrew Honig, which is published by No Starch Press.">



  <meta property="og:image" content="https://www.jaiminton.com/assets/images/PMALabCHAPTER9.JPG">



  <meta name="twitter:site" content="@CyberRaiju">
  <meta name="twitter:title" content="Practical Malware Analysis - Chapter 9 Lab Write-up">
  <meta name="twitter:description" content="This details reverse engineering activities and answers for labs contained in the book ‘Practical Malware Analysis’ by Michael Sikorski and Andrew Honig, which is published by No Starch Press.">
  <meta name="twitter:url" content="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter9/">


    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:image" content="https://www.jaiminton.com/assets/images/PMALabCHAPTER9.JPG">
  

  



  <meta property="article:published_time" content="2021-06-05T00:00:00+00:00">



  <meta property="article:modified_time" content="2023-11-13T17:51:03+00:00">



  

  


<style type="text/css">svg:not(:root).svg-inline--fa{overflow:visible}.svg-inline--fa{display:inline-block;font-size:inherit;height:1em;overflow:visible;vertical-align:-.125em}.svg-inline--fa.fa-lg{vertical-align:-.225em}.svg-inline--fa.fa-w-1{width:.0625em}.svg-inline--fa.fa-w-2{width:.125em}.svg-inline--fa.fa-w-3{width:.1875em}.svg-inline--fa.fa-w-4{width:.25em}.svg-inline--fa.fa-w-5{width:.3125em}.svg-inline--fa.fa-w-6{width:.375em}.svg-inline--fa.fa-w-7{width:.4375em}.svg-inline--fa.fa-w-8{width:.5em}.svg-inline--fa.fa-w-9{width:.5625em}.svg-inline--fa.fa-w-10{width:.625em}.svg-inline--fa.fa-w-11{width:.6875em}.svg-inline--fa.fa-w-12{width:.75em}.svg-inline--fa.fa-w-13{width:.8125em}.svg-inline--fa.fa-w-14{width:.875em}.svg-inline--fa.fa-w-15{width:.9375em}.svg-inline--fa.fa-w-16{width:1em}.svg-inline--fa.fa-w-17{width:1.0625em}.svg-inline--fa.fa-w-18{width:1.125em}.svg-inline--fa.fa-w-19{width:1.1875em}.svg-inline--fa.fa-w-20{width:1.25em}.svg-inline--fa.fa-pull-left{margin-right:.3em;width:auto}.svg-inline--fa.fa-pull-right{margin-left:.3em;width:auto}.svg-inline--fa.fa-border{height:1.5em}.svg-inline--fa.fa-li{width:2em}.svg-inline--fa.fa-fw{width:1.25em}.fa-layers svg.svg-inline--fa{bottom:0;left:0;margin:auto;position:absolute;right:0;top:0}.fa-layers{display:inline-block;height:1em;position:relative;text-align:center;vertical-align:-.125em;width:1em}.fa-layers svg.svg-inline--fa{-webkit-transform-origin:center center;transform-origin:center center}.fa-layers-counter,.fa-layers-text{display:inline-block;position:absolute;text-align:center}.fa-layers-text{left:50%;top:50%;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%);-webkit-transform-origin:center center;transform-origin:center center}.fa-layers-counter{background-color:#ff253a;border-radius:1em;-webkit-box-sizing:border-box;box-sizing:border-box;color:#fff;height:1.5em;line-height:1;max-width:5em;min-width:1.5em;overflow:hidden;padding:.25em;right:0;text-overflow:ellipsis;top:0;-webkit-transform:scale(.25);transform:scale(.25);-webkit-transform-origin:top right;transform-origin:top right}.fa-layers-bottom-right{bottom:0;right:0;top:auto;-webkit-transform:scale(.25);transform:scale(.25);-webkit-transform-origin:bottom right;transform-origin:bottom right}.fa-layers-bottom-left{bottom:0;left:0;right:auto;top:auto;-webkit-transform:scale(.25);transform:scale(.25);-webkit-transform-origin:bottom left;transform-origin:bottom left}.fa-layers-top-right{right:0;top:0;-webkit-transform:scale(.25);transform:scale(.25);-webkit-transform-origin:top right;transform-origin:top right}.fa-layers-top-left{left:0;right:auto;top:0;-webkit-transform:scale(.25);transform:scale(.25);-webkit-transform-origin:top left;transform-origin:top left}.fa-lg{font-size:1.3333333333em;line-height:.75em;vertical-align:-.0667em}.fa-xs{font-size:.75em}.fa-sm{font-size:.875em}.fa-1x{font-size:1em}.fa-2x{font-size:2em}.fa-3x{font-size:3em}.fa-4x{font-size:4em}.fa-5x{font-size:5em}.fa-6x{font-size:6em}.fa-7x{font-size:7em}.fa-8x{font-size:8em}.fa-9x{font-size:9em}.fa-10x{font-size:10em}.fa-fw{text-align:center;width:1.25em}.fa-ul{list-style-type:none;margin-left:2.5em;padding-left:0}.fa-ul>li{position:relative}.fa-li{left:-2em;position:absolute;text-align:center;width:2em;line-height:inherit}.fa-border{border:solid .08em #eee;border-radius:.1em;padding:.2em .25em .15em}.fa-pull-left{float:left}.fa-pull-right{float:right}.fa.fa-pull-left,.fab.fa-pull-left,.fal.fa-pull-left,.far.fa-pull-left,.fas.fa-pull-left{margin-right:.3em}.fa.fa-pull-right,.fab.fa-pull-right,.fal.fa-pull-right,.far.fa-pull-right,.fas.fa-pull-right{margin-left:.3em}.fa-spin{-webkit-animation:fa-spin 2s infinite linear;animation:fa-spin 2s infinite linear}.fa-pulse{-webkit-animation:fa-spin 1s infinite steps(8);animation:fa-spin 1s infinite steps(8)}@-webkit-keyframes fa-spin{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@keyframes fa-spin{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}.fa-rotate-90{-webkit-transform:rotate(90deg);transform:rotate(90deg)}.fa-rotate-180{-webkit-transform:rotate(180deg);transform:rotate(180deg)}.fa-rotate-270{-webkit-transform:rotate(270deg);transform:rotate(270deg)}.fa-flip-horizontal{-webkit-transform:scale(-1,1);transform:scale(-1,1)}.fa-flip-vertical{-webkit-transform:scale(1,-1);transform:scale(1,-1)}.fa-flip-both,.fa-flip-horizontal.fa-flip-vertical{-webkit-transform:scale(-1,-1);transform:scale(-1,-1)}:root .fa-flip-both,:root .fa-flip-horizontal,:root .fa-flip-vertical,:root .fa-rotate-180,:root .fa-rotate-270,:root .fa-rotate-90{-webkit-filter:none;filter:none}.fa-stack{display:inline-block;height:2em;position:relative;width:2.5em}.fa-stack-1x,.fa-stack-2x{bottom:0;left:0;margin:auto;position:absolute;right:0;top:0}.svg-inline--fa.fa-stack-1x{height:1em;width:1.25em}.svg-inline--fa.fa-stack-2x{height:2em;width:2.5em}.fa-inverse{color:#fff}.sr-only{border:0;clip:rect(0,0,0,0);height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;width:1px}.sr-only-focusable:active,.sr-only-focusable:focus{clip:auto;height:auto;margin:0;overflow:visible;position:static;width:auto}</style><link rel="canonical" href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter9/">





  <script type="application/ld+json">
    {
      "@context": "https://schema.org",
      "@type": "Organization",
      "url": "https://www.jaiminton.com",
      "logo": "https://www.jaiminton.com/assets/images/feature-logo.jpg"
    }
  </script>



  <script type="application/ld+json">
    {
      "@context": "https://schema.org",
      "@type": "Person",
      "name": "CyberRaiju",
      "url": "https://www.jaiminton.com",
      "sameAs": null
    }
  </script>







<!-- end _includes/seo.html -->


<link href="https://www.jaiminton.com/feed.xml" type="application/atom+xml" rel="alternate" title="Jai Minton Feed">

<!-- https://t.co/dKP3o1e -->
<meta name="viewport" content="width=device-width, initial-scale=1.0">

<script>
  document.documentElement.className = document.documentElement.className.replace(/\bno-js\b/g, '') + ' js ';
</script>

<!-- For all browsers -->
<link rel="stylesheet" href="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/main.css">

<!--[if IE ]>
  <style>
    /* old IE unsupported flexbox fixes */
    .greedy-nav .site-title {
      padding-right: 3em;
    }
    .greedy-nav button {
      position: absolute;
      top: 0;
      right: 0;
      height: 100%;
    }
  </style>
<![endif]-->



    <!-- start custom head snippets -->
<script src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/particles.js"></script>
<script>/* particlesJS.load(@dom-id, @path-json, @callback (optional)); */
  particlesJS.load('pixels', '/assets/particlesjs-config.json', function() {
  console.log('callback - particles.js config loaded');
  });</script>
<!-- insert favicons. use https://realfavicongenerator.net/ -->
<link rel="apple-touch-icon" sizes="180x180" href="https://www.jaiminton.com/apple-touch-icon.png">
<link rel="icon" type="image/png" sizes="32x32" href="https://www.jaiminton.com/favicon-32x32.png">
<link rel="icon" type="image/png" sizes="16x16" href="https://www.jaiminton.com/favicon-16x16.png">
<link rel="manifest" href="https://www.jaiminton.com/site.webmanifest">
<link rel="mask-icon" href="https://www.jaiminton.com/safari-pinned-tab.svg" color="#5bbad5">
<meta name="msapplication-TileColor" content="#da532c">
<meta name="theme-color" content="#ffffff">
<meta http-equiv="Content-Security-Policy" content="default-src 'self' https://www.youtube-nocookie.com/;script-src 'self' 'unsafe-inline' 'unsafe-eval' https://platform.twitter.com/ https://www.youtube-nocookie.com/ https://static.cloudflareinsights.com/ https://www.google-analytics.com use.fontawesome.com https://googletagmanager.com https://www.googletagmanager.com https://platform.twitter.com/widgets.js;img-src 'self' 'unsafe-inline' https://www.hackthebox.eu https://cards-dev.twitter.com/ https://www.youtube-nocookie.com/;style-src 'self' 'unsafe-inline';upgrade-insecure-requests">
<meta http-equiv="X-Frame-Options" content="SAMEORIGIN">
<meta http-equiv="X-XSS-Protection" content="1; mode=block">
<meta http-equiv="X-Content-Type-Option" content="nosniff">
<meta http-equiv="Strict-Transport-Security" content="max-age=31536000; includeSubDomains">
<!-- end custom head snippets -->

    
  <style id="fit-vids-style">.fluid-width-video-wrapper{width:100%;position:relative;padding:0;}.fluid-width-video-wrapper iframe,.fluid-width-video-wrapper object,.fluid-width-video-wrapper embed {position:absolute;top:0;left:0;width:100%;height:100%;}</style></head>
  <body class="layout--single wide" style="margin-bottom: 201.883px;">
    <!--[if lt IE 9]>
<div class="notice--danger align-center" style="margin: 0;">You are using an <strong>outdated</strong> browser. Please <a href="https://browsehappy.com/">upgrade your browser</a> to improve your experience.</div>
<![endif]-->

    

<div class="masthead">
  <div class="masthead__inner-wrap">
    <div class="masthead__menu">
      <nav id="site-nav" class="greedy-nav">
        
          <a class="site-logo" href="https://www.jaiminton.com/"><img src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/rootdir.png" alt=""></a>
        
        <a class="site-title" href="https://www.jaiminton.com/">CyberRaiju</a>
        <ul class="visible-links"><li class="masthead__menu-item">
              <a href="https://www.jaiminton.com/tags/">📗 Browse</a>
            </li><li class="masthead__menu-item">
              <a href="https://www.jaiminton.com/categories/">📙 Categories</a>
            </li><li class="masthead__menu-item">
              <a href="https://www.jaiminton.com/about/">❓ About Me/Privacy</a>
            </li></ul>
        
        <button class="search__toggle" type="button">
          <span class="visually-hidden">Toggle search</span>
          <svg class="icon" width="16" height="16" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.99 16">
            <path d="M15.5,13.12L13.19,10.8a1.69,1.69,0,0,0-1.28-.55l-0.06-.06A6.5,6.5,0,0,0,5.77,0,6.5,6.5,0,0,0,2.46,11.59a6.47,6.47,0,0,0,7.74.26l0.05,0.05a1.65,1.65,0,0,0,.5,1.24l2.38,2.38A1.68,1.68,0,0,0,15.5,13.12ZM6.4,2A4.41,4.41,0,1,1,2,6.4,4.43,4.43,0,0,1,6.4,2Z" transform="translate(-.01)"></path>
          </svg>
        </button>
        
        <button class="greedy-nav__toggle" type="button" style="" count="1">
          <span class="visually-hidden">Toggle menu</span>
          <div class="navicon"></div>
        </button>
        <ul class="hidden-links hidden"><li class="masthead__menu-item">
              <a href="https://buymeacoff.ee/JaiMinton">☕ Buy me a coffee</a>
            </li></ul>
      </nav>
    </div>
  </div>
</div>

    <div class="initial-content">
      


  
    



<nav class="breadcrumbs">
  <ol itemscope="" itemtype="https://schema.org/BreadcrumbList">
    
    
    
      
        <li itemprop="itemListElement" itemscope="" itemtype="https://schema.org/ListItem">
          <a href="https://www.jaiminton.com/" itemprop="item"><span itemprop="name">Home</span></a>
          <meta itemprop="position" content="1">
        </li>
        <span class="sep">/</span>
      
      
        
        <li itemprop="itemListElement" itemscope="" itemtype="https://schema.org/ListItem">
          <a href="https://www.jaiminton.com/categories/#tutorials" itemprop="item"><span itemprop="name">Tutorials</span></a>
          <meta itemprop="position" content="2">
        </li>
        <span class="sep">/</span>
      
    
      
      
        
        <li itemprop="itemListElement" itemscope="" itemtype="https://schema.org/ListItem">
          <a href="https://www.jaiminton.com/categories/#practicalmalwareanalysis" itemprop="item"><span itemprop="name">Practicalmalwareanalysis</span></a>
          <meta itemprop="position" content="3">
        </li>
        <span class="sep">/</span>
      
    
      
      
        <li class="current">Practical Malware Analysis - Chapter 9 Lab Write-up</li>
      
    
  </ol>
</nav>

  


<div id="main" role="main">
  
  <div class="sidebar">
  
  
    
      
        <img src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/PMALab.JPG" alt="Practical Malware Analysis - Lab Write-Up">
      
      <h3>Practical Malware Analysis - Lab Write-Up</h3>
      <p>This details reverse engineering activities and answers for 
labs contained in the book ‘Practical Malware Analysis’ by Michael 
Sikorski and Andrew Honig, which is published by No Starch Press.</p>

      

<nav class="nav__list">
  
  <input id="ac-toc" name="accordion-toc" type="checkbox">
  <label for="ac-toc">Toggle menu</label>
  <ul class="nav__items">
    
      <li>
        
          <span class="nav__sub-title">📌 Introduction</span>
        

        
        <ul>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/" class="">Start</a></li>
          
        </ul>
        
      </li>
    
      <li>
        
          <span class="nav__sub-title">🔬 1. Basic Static Techniques</span>
        

        
        <ul>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter1/" class="">Start</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter1/#lab-1-1" class="">Lab 1-1 (Lab01-01.exe and Lab01-01.dll)</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter1/#lab-1-2" class="">Lab 1-2 (Lab01-02.exe)</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter1/#lab-1-3" class="">Lab 1-3 (Lab01-03.exe)</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter1/#lab-1-4" class="">Lab 1-4 (Lab01-04.exe)</a></li>
          
        </ul>
        
      </li>
    
      <li>
        
          <span class="nav__sub-title">💻 2. Malware Analysis in Virtual Machines</span>
        

        
        <ul>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter2/" class="">Start</a></li>
          
        </ul>
        
      </li>
    
      <li>
        
          <span class="nav__sub-title">🏃 3. Basic Dynamic Analysis</span>
        

        
        <ul>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter3/" class="">Start</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter3/#lab-3-1" class="">Lab 3-1 (Lab03-01.exe)</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter3/#lab-3-2" class="">Lab 3-2 (Lab03-02.dll)</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter3/#lab-3-3" class="">Lab 3-3 (Lab03-03.exe)</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter3/#lab-3-4" class="">Lab 3-3 (Lab03-04.exe)</a></li>
          
        </ul>
        
      </li>
    
      <li>
        
          <span class="nav__sub-title">🔩 4. A Crash Course in x86 Disassembly</span>
        

        
        <ul>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter4/" class="">Start</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter4/#levels-of-abstraction" class="">Levels of Abstraction</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter4/#main-memory" class="">Main Memory</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter4/#instructions" class="">Instructions</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter4/#operands" class="">Opcodes and Endianness</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter4/#registers" class="">Registers</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter4/#simple-instructions" class="">Simple Instructions</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter4/#simple-instructions" class="">The Stack</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter4/#simple-instructions" class="">Conditionals</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter4/#branching" class="">Branching</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter4/#rep-instructions" class="">Rep Instructions</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter4/#c-main-methods-and-offsets" class="">C Main Methods and Offsets</a></li>
          
        </ul>
        
      </li>
    
      <li>
        
          <span class="nav__sub-title">🎊 5. IDA Pro</span>
        

        
        <ul>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter5/" class="">Start</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter5/#lab-5-1" class="">Lab 5-1 (Lab05-01.dll)</a></li>
          
        </ul>
        
      </li>
    
      <li>
        
          <span class="nav__sub-title">🎐 6. Recognizing C Code Constructs in Assembly</span>
        

        
        <ul>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter6/" class="">Start</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter6/#lab-6-1" class="">Lab 6-1 (Lab06-01.exe)</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter6/#lab-6-2" class="">Lab 6-2 (Lab06-02.exe)</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter6/#lab-6-3" class="">Lab 6-3 (Lab06-03.exe)</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter6/#lab-6-4" class="">Lab 6-4 (Lab06-04.exe)</a></li>
          
        </ul>
        
      </li>
    
      <li>
        
          <span class="nav__sub-title">👹 7. Analyzing Malicious Windows Programs</span>
        

        
        <ul>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter7/" class="">Start</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter7/#lab-7-1" class="">Lab 7-1 (Lab07-01.exe)</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter7/#lab-7-2" class="">Lab 7-2 (Lab07-02.exe)</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter7/#lab-7-3" class="">Lab 7-3 (Lab07-03.exe and Lab07-03.dll)</a></li>
          
        </ul>
        
      </li>
    
      <li>
        
          <span class="nav__sub-title">🐛 8. Debugging</span>
        

        
        <ul>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter8/" class="">Start</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter8/#source-level-vs-assembly-level-debuggers" class="">Source-Level vs. Assembly-Level Debuggers</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter8/#kernel-vs-user-mode-debugging" class="">Kernel vs. User-Mode Debugging</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter8/#using-a-debugger" class="">Using a Debugger</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter8/#exceptions" class="">Exceptions</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter8/#modifying-execution-with-a-debugger" class="">Modifying Execution with a Debugger</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter8/#modifying-program-execution-in-practice" class="">Modifying Program Execution in Practice</a></li>
          
        </ul>
        
      </li>
    
      <li>
        
          <span class="nav__sub-title">🪲 9. OllyDbg</span>
        

        
        <ul>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter9/" class="active">Start</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter9/#lab-9-1" class="">Lab 9-1 (Lab09-01.exe)</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter9/#lab-9-2" class="">Lab 9-2 (Lab09-02.exe)</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter9/#lab-9-3" class="">Lab 9-3 (Lab09-03.exe)</a></li>
          
        </ul>
        
      </li>
    
      <li>
        
          <span class="nav__sub-title">🌠 10. Kernel Debugging with WinDbg</span>
        

        
        <ul>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter10/" class="">Start</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter10/#useful-windbg-commands" class="">Useful Windbg Commands</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter10/#lab-10-1" class="">Lab 10-1 (Lab10-01.exe and Lab10-01.sys)</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter10/#lab-10-2" class="">Lab 10-2 (Lab10-02.exe)</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter10/#lab-10-3" class="">Lab 10-3 (Lab10-03.exe and Lab10-03.sys)</a></li>
          
        </ul>
        
      </li>
    
      <li>
        
          <span class="nav__sub-title">📡 11. Malware Behavior</span>
        

        
        <ul>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter11/" class="">Start</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter11/#lab-11-1" class="">Lab 11-1 (Lab11-01.exe and Lab11-01.sys)</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter11/#lab-11-2" class="">Lab 11-2 (Lab11-02.dll and Lab11-02.ini)</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter11/#lab-11-3" class="">Lab 11-3 (Lab11-03.exe and Lab11-03.dll)</a></li>
          
        </ul>
        
      </li>
    
      <li>
        
          <span class="nav__sub-title">👽 12. Covert Malware Launching</span>
        

        
        <ul>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter12/" class="">Start</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter12/#lab-12-1" class="">Lab 12-1 (Lab12-01.exe and Lab12-01.dll)</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter12/#lab-12-2" class="">Lab 12-2 (Lab12-02.exe)</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter12/#lab-12-3" class="">Lab 12-3 (Lab12-03.exe)</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter12/#lab-12-4" class="">Lab 12-4 (Lab12-04.exe)</a></li>
          
        </ul>
        
      </li>
    
      <li>
        
          <span class="nav__sub-title">💥 13. Data Encoding</span>
        

        
        <ul>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter13/" class="">Start</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter13/#lab-13-1" class="">Lab 13-1 (Lab13-01.exe)</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter13/#lab-13-2" class="">Lab 13-2 (Lab13-02.exe)</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter13/#lab-13-3" class="">Lab 13-3 (Lab13-03.exe)</a></li>
          
        </ul>
        
      </li>
    
      <li>
        
          <span class="nav__sub-title">🔎 14. Malware-Focussed Network Signatures</span>
        

        
        <ul>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter14/" class="">Start</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter14/#lab-14-1" class="">Lab 14-1 (Lab14-01.exe)</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter14/#lab-14-2" class="">Lab 14-2 (Lab14-02.exe)</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter14/#lab-14-3" class="">Lab 14-3 (Lab14-03.exe)</a></li>
          
        </ul>
        
      </li>
    
      <li>
        
          <span class="nav__sub-title">🚫 15. Anti-Disassembly</span>
        

        
        <ul>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter15/" class="">Start</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter15/#lab-15-1" class="">Lab 15-1 (Lab15-01.exe)</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter15/#lab-15-2" class="">Lab 15-2 (Lab15-02.exe)</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter15/#lab-15-3" class="">Lab 15-3 (Lab15-03.exe)</a></li>
          
        </ul>
        
      </li>
    
      <li>
        
          <span class="nav__sub-title">❎ 16. Anti-Debugging</span>
        

        
        <ul>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter16/" class="">Start</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter16/#lab-16-1" class="">Lab 16-1 (Lab16-01.exe)</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter16/#lab-16-2" class="">Lab 16-2 (Lab16-02.exe)</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter16/#lab-16-3" class="">Lab 16-3 (Lab16-03.exe)</a></li>
          
        </ul>
        
      </li>
    
      <li>
        
          <span class="nav__sub-title">📵 17. Anti-Virtual Machine Techniques</span>
        

        
        <ul>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter17/" class="">Start</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter17/#lab-17-1" class="">Lab 17-1 (Lab17-01.exe)</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter17/#lab-17-2" class="">Lab 17-2 (Lab17-02.dll)</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter17/#lab-17-3" class="">Lab 17-3 (Lab17-03.exe)</a></li>
          
        </ul>
        
      </li>
    
      <li>
        
          <span class="nav__sub-title">🔳 18. Packers and Unpacking</span>
        

        
        <ul>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter18/" class="">Start</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter18/#lab-18-1" class="">Lab 18-1 (Lab18-01.exe)</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter18/#lab-18-2" class="">Lab 18-2 (Lab18-02.exe)</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter18/#lab-18-3" class="">Lab 18-3 (Lab18-03.exe)</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter18/#lab-18-4" class="">Lab 18-4 (Lab18-04.exe)</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter18/#lab-18-5" class="">Lab 18-5 (Lab18-05.exe)</a></li>
          
        </ul>
        
      </li>
    
      <li>
        
          <span class="nav__sub-title">🐢 19. Shellcode Analysis</span>
        

        
        <ul>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter19/" class="">Start</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter19/#lab-19-1" class="">Lab 19-1 (Lab19-01.exe)</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter19/#lab-19-2" class="">Lab 19-2 (Lab19-02.exe)</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter19/#lab-19-3" class="">Lab 19-3 (Lab19-03.exe)</a></li>
          
        </ul>
        
      </li>
    
      <li>
        
          <span class="nav__sub-title">🌊 20. C++ Analysis</span>
        

        
        <ul>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter20/" class="">Start</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter20/#lab-20-1" class="">Lab 20-1 (Lab20-01.exe)</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter20/#lab-20-2" class="">Lab 20-2 (Lab20-02.exe)</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter20/#lab-20-3" class="">Lab 20-3 (Lab20-03.exe)</a></li>
          
        </ul>
        
      </li>
    
      <li>
        
          <span class="nav__sub-title">🌌 21. 64-Bit Malware</span>
        

        
        <ul>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter21/" class="">Start</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter21/#lab-21-1" class="">Lab 21-1 (Lab21-01.exe)</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter21/#lab-21-2" class="">Lab 21-2 (Lab21-02.exe)</a></li>
          
        </ul>
        
      </li>
    
      <li>
        
          <span class="nav__sub-title">🎁 Conclusion</span>
        

        
        <ul>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Conclusion/" class="">Start</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Conclusion/#extra---yara-malware-identification" class="">YARA: Malware Identification</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Conclusion/#tutorial-conclusion" class="">Tutorial Conclusion</a></li>
          
        </ul>
        
      </li>
    
  </ul>
</nav>
    
    
  
  </div>


  <article class="page" itemscope="" itemtype="https://schema.org/CreativeWork">
    <meta itemprop="headline" content="Practical Malware Analysis - Chapter 9 Lab Write-up">
    <meta itemprop="description" content="This details reverse engineering activities and answers for labs contained in the book ‘Practical Malware Analysis’ by Michael Sikorski and Andrew Honig, which is published by No Starch Press.">
    <meta itemprop="datePublished" content="June 05, 2021">
    <meta itemprop="dateModified" content="November 13, 2023">

    <div class="page__inner-wrap">
      
        <header>
          <h1 id="page-title" class="page__title" itemprop="headline">Practical Malware Analysis - Chapter 9 Lab Write-up
</h1>
          
            <p class="page__meta"><svg class="svg-inline--fa fa-clock fa-w-16" aria-hidden="true" focusable="false" data-prefix="far" data-icon="clock" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" data-fa-i2svg=""><path fill="currentColor" d="M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm0 448c-110.5 0-200-89.5-200-200S145.5 56 256 56s200 89.5 200 200-89.5 200-200 200zm61.8-104.4l-84.9-61.7c-3.1-2.3-4.9-5.9-4.9-9.7V116c0-6.6 5.4-12 12-12h32c6.6 0 12 5.4 12 12v141.7l66.8 48.6c5.4 3.9 6.5 11.4 2.6 16.8L334.6 349c-3.9 5.3-11.4 6.5-16.8 2.6z"></path></svg><!-- <i class="far fa-clock" aria-hidden="true"></i> --> 




  17 minute read
</p>
          
        </header>
      

      <section class="page__content" itemprop="text">
        
        <p><img src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/PMALabCHAPTER9.JPG" alt="PMALab" class="align-center"></p>

<h1 id="chapter-9-ollydbg">Chapter 9. OllyDbg</h1>

<p>Analyze the malware found in the file Lab09-01.exe using OllyDbg and 
IDA Pro to answer the following questions. This malware was initially 
analyzed in the Chapter 3 labs using basic static and dynamic analysis 
techniques.</p>

<h2 id="lab-9-1">Lab 9-1</h2>

<p>Analyze Lab09-01.exe.</p>

<h3 id="question-1">Question 1</h3>

<p class="notice--info">How can you get this malware to install itself?</p>

<h3 id="answer-1">Answer 1</h3>

<p>Opening up the malware in OllyDbg we can see that it immediately pauses as soon as it hits the specified executable entry point.</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/Screenshot01_002.jpg" alt="Lab09-01.exe"></p>

<p>By examining the function at address 0x403945 we can see that 3 
arguments are available to be passed to the program and what looks to be
 the start of the main function.</p>

<p>Using F8 we can step over instructions of the program, and once we 
reach the instruction past ‘GetCommandLine’, we can see that EAX has 
been updated to reflect the program command line, which in this case was
 running the application without any arguments.</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/Screenshot02.jpg" alt="Lab09-01.exe"></p>

<p>Once we reach the main function, if we press F8 the program runs 
through it which isn’t what we want. By pressing F7 we can step into the
 function to continue analysis with F8.</p>

<p>Upon hitting 0x402AFD we can see a comparison takes place to see if 
the number of arguments passed to the program is equal to one.</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/Screenshot03_003.jpg" alt="Lab09-01.exe"></p>

<p>As no arguments were passed the comparison fails. As such a jump is not taken and the program continues to call 0x401000.</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/Screenshot04_002.jpg" alt="Lab09-01.exe"></p>

<p>Once again by stepping into this with F7 we can examine some more. 
Inside this function stands out a particular check for what looks to be a
 typo’d registry key ‘HKLM\SOFTWARE\Microsoft \XPS’. As this doesn’t 
exist the jump statement after is never taken and we instead jump to 
0x401066 (once again we can step into this with F7).</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/Screenshot05_003.jpg" alt="Lab09-01.exe"></p>

<p>After this a return occurs and after a few more comparisons we wind 
up at 0x402410. By stepping through this once more, using F8 to skip 
Windows API calls as required, we find that the malware begins to build 
an instruction designed to delete the malware as it was run without any 
kind of parameters. This is a common anti-analysis technique.</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/Screenshot06_002.jpg" alt="Lab09-01.exe"></p>

<p>Because we’re running the program in OllyDbg an open handle exists on the program and deletion fails.</p>

<p>At this point we know that running the program is not enough to 
install it, so we re-examine the comparisons undertaken when the program
 runs, first up is ‘-in’.</p>

<p>By using Debug &gt; Arguments, we can add in -in as a command line 
argument and restart using CTRL+F2. Once again we move through analysis,
 except this time a Jump is taken, and we can see a comparison will be 
run on our provided argument ‘-in’.</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/Screenshot07.jpg" alt="Lab09-01.exe"></p>

<p>Looking inside of 0x402510 which is called we can see that a number 
of arithmetic operations occur but no functions are called. In this 
instance it looks to be a check for certain characters, so we can assume
 that ‘-in’ may be for installing the malware, and this may be checking 
for some sort of password. What we’re aiming to achieve from this 
function is to return EAX with a value of 1 (signifying a success in 
relation to the calling conditions). Highlighted in red are conditions 
that if evaluated will jump past the statement that sets EAX to 1. 
Highlighted in blue is our end goal, but as we can see straight away the
 first comparison fails and we jump straight to the end of the function 
without setting EAX to 1.</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/Screenshot08_002.jpg" alt="Lab09-01.exe"></p>

<p>One way to completely bypass the check is to patch it so that it 
returns with EAX = 1, or by modifying the value of EAX to return one 
after the checks fail.</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/Screenshot09_002.jpg" alt="Lab09-01.exe"></p>

<p>This time by stepping through we can see that a jump does occur and we move past 0x402410 that executes binary deletion.</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/Screenshot10_003.jpg" alt="Lab09-01.exe"></p>

<p>Stepping through we hit another function at 0x40380F. If we continue 
to step through this we will see more comparisons taking place to ensure
 that the parameters provided match expected parameters of the program. 
This passes; however, at one point we will find ourself falling back 
into 0x402410 again due to a comparison that checks if more than 3 
elements have been passed to the program (noting that the application 
name is passed as an argument). Due to the comparison failing we wind up
 again in a state of deletion.</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/Screenshot11_003.jpg" alt="Lab09-01.exe"></p>

<p>Repeating the process once more except with any random given 
parameter for the password we can meet this requirement and continue 
with application installation.</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/Screenshot12_002.jpg" alt="Lab09-01.exe"></p>

<p>With this we now see that a jump doesn’t occur and the program continues as expected.</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/Screenshot13.jpg" alt="Lab09-01.exe"></p>

<p>Once we hit 0x40268F and step into it we can see reference to ‘.exe’ 
and ‘%SYSTEMROOT%\system32\Lab09-01’ which has been taken from the file 
name passed to the malware.</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/Screenshot14.jpg" alt="Lab09-01.exe"></p>

<p>As we progress we can see that this opens the Service Control Manager
 and looks at creating a service with the name Lab09-01 if it doesnt 
exist already.</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/Screenshot15_002.jpg" alt="Lab09-01.exe"></p>

<p>This service is created with a number of parameters. Which can be seen within OllyDbg.</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/Screenshot16_002.jpg" alt="Lab09-01.exe"></p>

<p>After stepping over this function we can see that a service has been 
created pointing to %SYSTEMROOT%\system32\Lab09-01.exe and that the 
malware has indeed copied itself to this directory indicating it has 
been successfully installed.</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/Screenshot17_002.jpg" alt="Lab09-01.exe"></p>

<h3 id="question-2">Question 2</h3>

<p class="notice--info">What are the command-line options for this program? What is the password requirement?</p>

<h3 id="answer-2">Answer 2</h3>

<p>In addition to the mentioned ‘-in’ argument check, we can see 3 other command-line options in this malware. “-re” “-c” and “-cc”</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/Screenshot18.jpg" alt="Lab09-01.exe"></p>

<p>The password requirement mentioned previously can be uncovered by 
carefully examining how many checks occur in this function and breaking 
down what each comparison is used for knowing that we want their 
comparisons to be true. As such we need to also look at activity 
occurring before the comparison, and if required examine the current 
stack content as we move through it.</p>

<p>First off we can see that the password is 4 characters long, then we 
look for it containing (61) ‘a’ as the first letter, then we compare the
 result of letter 2 (62) take letter 1 (61) and see if it equals 1, then
 we compare whether the next character is c (63), before finally adding 1
 to this and checking if the next character is d (64).</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/Screenshot19.jpg" alt="Lab09-01.exe"></p>

<p>If we break down how the value ‘b’ is obtained, we can see that it is derived directly from what we’ve pushed to the stack.</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/Screenshot19-1.jpg" alt="Lab09-01.exe">
<img src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/Screenshot19-2.jpg" alt="Lab09-01.exe">
<img src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/Screenshot19-3.jpg" alt="Lab09-01.exe">
<img src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/Screenshot19-4.jpg" alt="Lab09-01.exe"></p>

<p>By using the ‘-re abcd’ argument (or any of the others, we can see 
this still performs the same password check, so this indicates abcd 
needs to be passed to the malware to run unless you want it to simply 
remove itself.</p>

<p>By stepping through and stepping over this execution as required, we 
reach a point where the Service Control Manager is instructed to delete a
 service.</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/Screenshot20.jpg" alt="Lab09-01.exe"></p>

<p>Continuing through this results in the malware removing itself by deleting the service and associated binary.</p>

<p>By using the ‘-c’ argument we wind up once again with the malware 
attempting to remove itself. This is due again to a check on the number 
of arguments passed to the program. Looking at the hex dump of the 
malware while it is running leads us to believe a default configuration 
is setup to communicate to a URL with 2 associated parameters ‘80’ and 
‘60’.</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/Screenshot21.jpg" alt="Lab09-01.exe"></p>

<p>Given these parameters look to be related to post-compromise 
activity, we need to first ensure the malware is installed using -in.</p>

<p>By using the ‘-cc abcd’ argument we see that the application looks 
for its current configuration that’s been stored at: 
‘HKLM\SOFTWARE\Microsoft \XPS’ and dumps it to the programs output.</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/Screenshot22.jpg" alt="Lab09-01.exe">
<img src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/Screenshot23.jpg" alt="Lab09-01.exe">
<img src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/Screenshot24.jpg" alt="Lab09-01.exe"></p>

<h3 id="question-3">Question 3</h3>

<p class="notice--info">How can you use OllyDbg to permanently patch this malware, so that it doesn’t require the special command-line password?</p>

<h3 id="answer-3">Answer 3</h3>

<p>As mentioned in answer 1, this malware can be patched under 0x402510 
to always return with EAX = 1. To do this we right click the start of 
the function call, click edit, and use the assocviated HEX values to 
make it assign EAX as 1.</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/Screenshot25.jpg" alt="Lab09-01.exe"></p>

<p>After this we edit the next HEX values to immediately make it return from the function signalling a successful outcome.</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/Screenshot26.jpg" alt="Lab09-01.exe"></p>

<p>To patch the binary we can right click and select copy to executable 
&gt; all modifications, before right clicking and selecting save file. 
At this point if we open the modified binary and run as normal, we can 
now run commands without the need for a password.</p>

<h3 id="question-4">Question 4</h3>

<p class="notice--info">What are the host-based indicators of this malware?</p>

<h3 id="answer-4">Answer 4</h3>

<p>Host-based indicators of this malware include the registry key used to store the malware configuration:</p>

<ul>
  <li>‘HKLM\SOFTWARE\Microsoft \XPS’</li>
</ul>

<p>The service created for persistence with the name:</p>

<ul>
  <li>“<filename> Manager Service"</filename></li>
</ul>

<p>or</p>

<ul>
  <li>“<service name="" argument=""> Manager Service"</service></li>
</ul>

<p>and finally the presence of a binary at:</p>

<ul>
  <li>%SYSTEMROOT%\Windows\System32</li>
</ul>

<p>With the name of the service name argument passed, or the binary name.</p>

<h3 id="question-5">Question 5</h3>

<p class="notice--info">What are the different actions this malware can be instructed to take via the network?</p>

<h3 id="answer-5">Answer 5</h3>

<p>By opening this using IDA we can find sub_402020 which contains a 
number of instructions that help determine what different actions this 
malware can be instructed to take. This is also seen at 0x402020 in 
OllyDbg.</p>

<p>In this instance functions have been renamed to “Command_*” for readability.</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/Screenshot27.jpg" alt="Lab09-01.exe"></p>

<ul>
  <li>SLEEP: Do nothing for a certain amount of seconds. Note: This is 
registered in milliseconds so the value passed is multiplied by 1000.</li>
</ul>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/Screenshot28.jpg" alt="Lab09-01.exe"></p>

<ul>
  <li>UPLOAD: Download a file from a web resource over a specified port 
and write it to disk. Note: This isn’t a typo, in this instance upload 
is in fact downloading to the host.</li>
</ul>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/Screenshot29.jpg" alt="Lab09-01.exe">
<img src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/Screenshot30.jpg" alt="Lab09-01.exe"></p>

<ul>
  <li>DOWNLOAD: Upload a file from disk to a web resource. Note: This 
isn’t a typo, in this instance download is in fact uploading to a remote
 the host.</li>
</ul>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/Screenshot31.jpg" alt="Lab09-01.exe">
<img src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/Screenshot32.jpg" alt="Lab09-01.exe"></p>

<ul>
  <li>CMD: Execute a command and send back the output to a web resource.</li>
</ul>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/Screenshot33.jpg" alt="Lab09-01.exe">
<img src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/Screenshot34.jpg" alt="Lab09-01.exe"></p>

<ul>
  <li>NOTHING: Do nothing</li>
</ul>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/Screenshot35.jpg" alt="Lab09-01.exe"></p>

<h3 id="question-6">Question 6</h3>

<p class="notice--info">Are there any useful network-based signatures for this malware?</p>

<h3 id="answer-6">Answer 6</h3>

<p>We know from previous analysis of this malware that configuration is stored in the registry so by default it communicates with:</p>

<ul>
  <li>http://www.practicalmalwareanalysis.com</li>
</ul>

<p>To analyse how this communication occurs and whether there’s any 
other network-based indicators we look back to sub_402020 and the 
function it calls prior to comparing the response received to one of the
 mentioned commands. This function is sub_401E60.</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/Screenshot36.jpg" alt="Lab09-01.exe"></p>

<p>This contains a number of unusual string comparisons and operations based on backticks and apostraphes.</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/Screenshot37.jpg" alt="Lab09-01.exe"></p>

<p>Moving back to Ollydbg we can move back to debugging the application 
in an attempt to understand this. Starting out we add a breakpoint at 
0x401E60 by using CTRL + G to jump to this address and using F2 to 
toggle a breakpoint.</p>

<p>We need to confirm the application isn’t running with any command 
line parameters and move through with F8 until the breakpoint we set is 
hit. From here we can begin to analyse specific register or stack values
 before and after a number of subroutines are run by setting breakpoints
 similar to the below.</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/Screenshot38.jpg" alt="Lab09-01.exe"></p>

<p>After running through the first function by using F9 twice, we see 
reference to WinINet API and the previously mentioned domain which leads
 us to believe this is likely using FTP or HTTP for communication.</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/Screenshot39.jpg" alt="Lab09-01.exe"></p>

<p>Repeating the process with F9 twice reveals our ECX register with the value ‘80’.</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/Screenshot40.jpg" alt="Lab09-01.exe"></p>

<p>Based on what we know and it being stored in a value ‘p’, we can 
infer that this is the port that the malware communicates via. Repeating
 the process once more reveals what looks like it may be part of a URL.</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/Screenshot41.jpg" alt="Lab09-01.exe"></p>

<p>By repeating the process once more we see that it fails to run 
through to our later break points in our isolated environment. 
Subsequent analysis shows that the URL elements mentioned above change. 
If we step through to 0x401EF9 we can see that this is indeed being 
passed as an argument to a function at 0x401AF0.</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/Screenshot42.jpg" alt="Lab09-01.exe"></p>

<p>Stepping into this function we can see evidence this is making a HTTP/1.0 Get request to the server for C2 without any headers.</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/Screenshot43.jpg" alt="Lab09-01.exe"></p>

<p>After the request is made there are some comparisons based on 
returned backtick and apostraphes as we found earlier, and this looks to
 be determining exactly how the C2 process will execute the command 
passed to it (how the C2 protocol works).</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/Screenshot44.jpg" alt="Lab09-01.exe"></p>

<p>Based on all of this we can conclude that Get requests using HTTP/1.0
 beaconing to http://www.practicalmalwareanalysis.com/xxxx/xxxx.xxx 
without any headers or user agent is a network indicator of this 
malware.</p>

<h2 id="lab-9-2">Lab 9-2</h2>

<p>Analyze the malware found in the file Lab09-02.exe using OllyDbg to answer the following questions.</p>

<h3 id="question-1-1">Question 1</h3>

<p class="notice--info">What strings do you see statically in the binary?</p>

<h3 id="answer-1-1">Answer 1</h3>

<p>Running Strings over the binary reveals a number of entries for what 
look like imports or function names, and ‘cmd’, but other than that not a
 lot else.</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/Screenshot01.jpg" alt="Lab09-02.exe"></p>

<h3 id="question-2-1">Question 2</h3>

<p class="notice--info">What happens when you run this binary?</p>

<h3 id="answer-2-1">Answer 2</h3>

<p>Attempting to run the binary results in it terminating almost instantly without showing any other visible actions.</p>

<h3 id="question-3-1">Question 3</h3>

<p class="notice--info">How can you get this sample to run its malicious payload?</p>

<h3 id="answer-3-1">Answer 3</h3>

<p>By stepping through the program with a debugger and a few break 
points, we can see that after the call at 0x401626, EDX is filled with 
the value “ocl.exe”, and this remains throughout the program until a 
comparison check to it fails and the program terminates.</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/Screenshot02_002.jpg" alt="Lab09-02.exe">
<img src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/Screenshot03.jpg" alt="Lab09-02.exe"></p>

<p>Based on this we can assume that the program checks if it is named 
ocl.exe, and if it isn’t then it terminates. If we rename it and 
continue to debug, we realise that termination doesn’t occur here 
anymore.</p>

<h3 id="question-4-1">Question 4</h3>

<p class="notice--info">What is happening at 0x00401133?</p>

<h3 id="answer-4-1">Answer 4</h3>

<p>If we examine 0x00401133 we can see that a number of Hex values are being moved onto a relevant area of the stack segment.</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/Screenshot04_003.jpg" alt="Lab09-02.exe"></p>

<p>This is a common string obfuscation technique to make analysis more challenging.</p>

<p>If we take the hex values accounting for the null values present and convert this to ascii we get the following:</p>

<ul>
  <li>31 71 61 7a 32 77 73 78 33 65 64 63 = 1qaz2wsx3edc</li>
  <li>6F 63 6C 2E 65 78 65 = ocl.exe</li>
</ul>

<h3 id="question-5-1">Question 5</h3>

<p class="notice--info">What arguments are being passed to subroutine 0x00401089?</p>

<h3 id="answer-5-1">Answer 5</h3>

<p>Adding breakpoints and running through the application later reveals 
the presence of 1qaz2wsx3edc which is being passed to subroutine 
0x00401089 and a pointer to 0x12FD58 (Incl ESI).</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/Screenshot05.jpg" alt="Lab09-02.exe"></p>

<h3 id="question-6-1">Question 6</h3>

<p class="notice--info">What domain name does this malware use?</p>

<h3 id="answer-6-1">Answer 6</h3>

<p>By running through this program to our next breakpoint we can see 
that it flows through the decoding routine at 0x00401089 and reveals the
 domain used by this malware in EAX ready to be passed to the 
‘gethostname’ imported function:  www.practicalmalwareanalysis.com</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/Screenshot06_003.jpg" alt="Lab09-02.exe"></p>

<h3 id="question-7">Question 7</h3>

<p class="notice--info">What encoding routine is being used to obfuscate the domain name?</p>

<h3 id="answer-7">Answer 7</h3>

<p>To figure this out we need to move into the encoding routine at 
0x00401089. Here we can see a routine that loops and contains reference 
to an XOR command against EDX (which we know contains the random string 
we discovered earlier).</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/Screenshot07_002.jpg" alt="Lab09-02.exe"></p>

<p>By adding a breakpoint at this command and running the program we can
 see that it performs this XOR against a letter one by one, and in the 
first instance it XORs 46 and 31 (first letter of our key).</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/Screenshot08.jpg" alt="Lab09-02.exe"></p>

<p>Running the program again reveals it XORs 6 and 71 (second letter of our key)</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/Screenshot09.jpg" alt="Lab09-02.exe"></p>

<p>By creating a break point at the comparison statement that occurs, 
and following the associated memory dump, we’re able to see the string 
being decoded in real time as we run through the program and hit our 
breakpoints.</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/Screenshot10.jpg" alt="Lab09-02.exe"></p>

<h3 id="question-8">Question 8</h3>

<p class="notice--info">What is the significance of the CreateProcessA call at 0x0040106E?</p>

<h3 id="answer-8">Answer 8</h3>

<p>This function isn’t called when we run through the program as there’s
 no successful beacon to the C2 we uncovered previously. Having said 
this we can see from this function that CreateProcessA looks to be run 
with cmd.exe as the process before waiting indefinitely in a loop.</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/Screenshot11.jpg" alt="Lab09-02.exe"></p>

<p>By examining this in IDA for more context, we can see that it is 
making the cmd.exe window hidden, in addition to specifying the standard
 input, output, and error streams be sent to an argument that’s passed 
into this function.</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/Screenshot12.jpg" alt="Lab09-02.exe"></p>

<p>Looking at the only calling function to this, we can see that the 
argument passed to this is the established socket to the C2. We now know
 that this process acts as the reverse shell allowing access to this 
host.</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/Screenshot13_002.jpg" alt="Lab09-02.exe"></p>

<h2 id="lab-9-3">Lab 9-3</h2>

<p>Analyze the malware found in the file Lab09-03.exe using OllyDbg and 
IDA. This malware loads three included DLLs (DLL1.dll, DLL2.dll, and 
DLL3.dll) that are all built to request the same memory load location.</p>

<h3 id="question-1-2">Question 1</h3>

<p class="notice--info">What DLLs are imported by Lab09-03.exe?</p>

<h3 id="answer-1-2">Answer 1</h3>

<p>By opening the program in IDA we can see that the imported DLLs of this program are:</p>

<ul>
  <li>DLL1.dll</li>
  <li>DLL2.dll</li>
  <li>KERNEL32.dll</li>
  <li>NETAPI32.dll</li>
</ul>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/Screenshot01_003.jpg" alt="Lab09-03.exe"></p>

<p>In addition to these, if we examine calls to the WinAPI 
‘LoadLibraryA’, we can find another 2 DLLs that are dynamically loaded 
into memory from the running program.</p>

<ul>
  <li>DLL3.dll</li>
  <li>user32.dll</li>
</ul>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/Screenshot02_003.jpg" alt="Lab09-03.exe">
<img src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/Screenshot03_002.jpg" alt="Lab09-03.exe"></p>

<h3 id="question-2-2">Question 2</h3>

<p class="notice--info">What is the base address requested by DLL1.dll, DLL2.dll, and DLL3.dll?</p>

<h3 id="answer-2-2">Answer 2</h3>

<p>By opening these up in PE-bear, we’re able to see that they all have an image base set to 0x10000000.</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/Screenshot04.jpg" alt="Lab09-03.exe"></p>

<h3 id="question-3-2">Question 3</h3>

<p class="notice--info">When you use OllyDbg to debug Lab09-03.exe, what is the assigned based address for: DLL1.dll, DLL2.dll, and DLL3.dll?</p>

<h3 id="answer-3-2">Answer 3</h3>

<p>Because we know that DLL3.dll is dynamically loaded in we’ll need to 
add a breakpoint after this loadlibrary call to check when all 3 are 
loaded into memory.</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/Screenshot05_002.jpg" alt="Lab09-03.exe"></p>

<p>To view where these are in memory we can use ALT+M to view the 
programs memory. Note: These values will likely differ per run through 
or system.</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/Screenshot06.jpg" alt="Lab09-03.exe"></p>

<p>In this instance the results are:</p>

<ul>
  <li>DLL1: 0x10000000</li>
  <li>DLL2: 0x00150000</li>
  <li>DLL3: 0x00160000</li>
</ul>

<h3 id="question-4-2">Question 4</h3>

<p class="notice--info">When Lab09-03.exe calls an import function from DLL1.dll, what does this import function do?</p>

<h3 id="answer-4-2">Answer 4</h3>

<p>Because this occurs prior to the breakpoint we previously set, we can
 get our first glimpse on what has happened by viewing the program 
output while it is at our breakpoint.</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/Screenshot07_003.jpg" alt="Lab09-03.exe"></p>

<p>This appears to display an output of “DLL 1 mystery data”, and then a
 number. By disassembling this in IDA we can get more information on 
what is happening.</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/Screenshot08_003.jpg" alt="Lab09-03.exe">
<img src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/Screenshot09_003.jpg" alt="Lab09-03.exe"></p>

<p>Based on this we conclude that this is printing out the current processID of the process in which the DLL has been loaded into.</p>

<h3 id="question-5-2">Question 5</h3>

<p class="notice--info">When Lab09-03.exe calls WriteFile, what is the filename it writes to?</p>

<h3 id="answer-5-2">Answer 5</h3>

<p>To get this answer we need to look at both DLL2.dll, and 
Lab09-03.exe. In Lab09-03.exe we can see that this calls  and moves the 
output into ebp+hObject before passing it a buffer of the characters 
“malwareanalysisbook.com” to write.</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/Screenshot10_002.jpg" alt="Lab09-03.exe"></p>

<p>By examining DLL2.dll, and looking at the exported DLL2ReturnJ 
function, we can see that this returns a value stored under 
dword_1000B078. When we examine this we can see it is being assigned 
based on the DLLs Main method as a handle to a file with the name 
“temp.txt”.</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/Screenshot11_002.jpg" alt="Lab09-03.exe"></p>

<p>Based on this we know that this writes “malwareanalysisbook.com” into a file called “temp.txt”.</p>

<h3 id="question-6-2">Question 6</h3>

<p class="notice--info">When Lab09-03.exe creates a job using NetScheduleJobAdd, where does it get the data for the second parameter?</p>

<h3 id="answer-6-2">Answer 6</h3>

<p>If we look at this execution we can see that it passes 3 parameter items: JobID, Buffer, and Servername.</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/Screenshot12_003.jpg" alt="Lab09-03.exe"></p>

<p>Buffer is called from the output of Dll3GetStructure which once again is determined by the DLLs main function.</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/Screenshot13_003.jpg" alt="Lab09-03.exe"></p>

<p>If we examine the <a href="https://docs.microsoft.com/en-us/windows/win32/api/lmat/nf-lmat-netschedulejobadd">NetScheduleJobAdd function documentation</a> we can see that buffer needs to be a pointer to an AT_INFO structure defining the job to submit.</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/Screenshot14_002.jpg" alt="Lab09-03.exe"></p>

<p>By using IDA we can add in the AT_INFO structure and then apply this 
to dword_1000B0A0. After first adding it to the structures window:</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/Screenshot15.jpg" alt="Lab09-03.exe"></p>

<p>By viewing dword_1000B0A0 in memory and clicking Edit &gt; Struct Var
 to AT_INFO we can change this directly and make more sense of the data 
at hand.</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/Screenshot16.jpg" alt="Lab09-03.exe"></p>

<p>Based on this we can see that it will ping www.malwareanalysis every day at 3600000 milliseconds (60mins) past midnight (1am).</p>

<h3 id="question-7-1">Question 7</h3>

<p class="notice--info">While running or debugging the program, you will
 see that it prints out three pieces of mystery data. What are the 
following: DLL 1 mystery data 1, DLL 2 mystery data 2, and DLL 3 mystery
 data 3?</p>

<h3 id="answer-7-1">Answer 7</h3>

<p>We already know what these are by the analysis conducted in previous 
questions. These are outputted from the values found in our relevant DLL
 files.</p>

<ul>
  <li>DLL 1 mystery data 1: Process ID DLL is running under. (This was found in Question 4)</li>
  <li>DLL 2 mystery data 2: Handle ID for the Handle on file temp.txt. (This was found in Question 5).</li>
  <li>DLL 3 mystery data 3: Memory location of “ping www.malwareanalysisbook.com”. (This was found in Question 6).</li>
</ul>

<h3 id="question-8-1">Question 8</h3>

<p class="notice--info">How can you load DLL2.dll into IDA Pro so that it matches the load address used by OllyDbg?</p>

<h3 id="answer-8-1">Answer 8</h3>

<p>In this instance we want it to match the load address of 0x00150000. 
We can do this by clicking the ‘Manual Load’ checkbox in IDA when 
analysing the DLL and specifying the load address wanted.</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/Screenshot17.jpg" alt="Lab09-03.exe"></p>

<p>This concludes chapter 9, <a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter10/">proceed to the next chapter</a>.</p>

        
      </section>

      <footer class="page__meta">
        
        
  


  
  
  

  <p class="page__taxonomy">
    <strong><svg class="svg-inline--fa fa-tags fa-w-20 fa-fw" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="tags" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 640 512" data-fa-i2svg=""><path fill="currentColor" d="M497.941 225.941L286.059 14.059A48 48 0 0 0 252.118 0H48C21.49 0 0 21.49 0 48v204.118a48 48 0 0 0 14.059 33.941l211.882 211.882c18.744 18.745 49.136 18.746 67.882 0l204.118-204.118c18.745-18.745 18.745-49.137 0-67.882zM112 160c-26.51 0-48-21.49-48-48s21.49-48 48-48 48 21.49 48 48-21.49 48-48 48zm513.941 133.823L421.823 497.941c-18.745 18.745-49.137 18.745-67.882 0l-.36-.36L527.64 323.522c16.999-16.999 26.36-39.6 26.36-63.64s-9.362-46.641-26.36-63.64L331.397 0h48.721a48 48 0 0 1 33.941 14.059l211.882 211.882c18.745 18.745 18.745 49.137 0 67.882z"></path></svg><!-- <i class="fas fa-fw fa-tags" aria-hidden="true"></i> --> Tags: </strong>
    <span itemprop="keywords">
    
      
      
      <a href="https://www.jaiminton.com/tags/#binary-patching" class="page__taxonomy-item" rel="tag">Binary Patching</a><span class="sep">, </span>
    
      
      
      <a href="https://www.jaiminton.com/tags/#breakpoints" class="page__taxonomy-item" rel="tag">Breakpoints</a><span class="sep">, </span>
    
      
      
      <a href="https://www.jaiminton.com/tags/#debugging" class="page__taxonomy-item" rel="tag">Debugging</a><span class="sep">, </span>
    
      
      
      <a href="https://www.jaiminton.com/tags/#dynamic-malware-analysis" class="page__taxonomy-item" rel="tag">Dynamic Malware Analysis</a><span class="sep">, </span>
    
      
      
      <a href="https://www.jaiminton.com/tags/#ida-pro" class="page__taxonomy-item" rel="tag">IDA Pro</a><span class="sep">, </span>
    
      
      
      <a href="https://www.jaiminton.com/tags/#malware-analysis" class="page__taxonomy-item" rel="tag">Malware Analysis</a><span class="sep">, </span>
    
      
      
      <a href="https://www.jaiminton.com/tags/#no-starch-press" class="page__taxonomy-item" rel="tag">No Starch Press</a><span class="sep">, </span>
    
      
      
      <a href="https://www.jaiminton.com/tags/#ollydbg" class="page__taxonomy-item" rel="tag">OllyDbg</a><span class="sep">, </span>
    
      
      
      <a href="https://www.jaiminton.com/tags/#pe-bear" class="page__taxonomy-item" rel="tag">PE-bear</a><span class="sep">, </span>
    
      
      
      <a href="https://www.jaiminton.com/tags/#pma" class="page__taxonomy-item" rel="tag">PMA</a><span class="sep">, </span>
    
      
      
      <a href="https://www.jaiminton.com/tags/#static-malware-analysis" class="page__taxonomy-item" rel="tag">Static Malware Analysis</a><span class="sep">, </span>
    
      
      
      <a href="https://www.jaiminton.com/tags/#strings" class="page__taxonomy-item" rel="tag">Strings</a><span class="sep">, </span>
    
      
      
      <a href="https://www.jaiminton.com/tags/#structures-structs" class="page__taxonomy-item" rel="tag">Structures (Structs)</a><span class="sep">, </span>
    
      
      
      <a href="https://www.jaiminton.com/tags/#x86-disassembly" class="page__taxonomy-item" rel="tag">x86 Disassembly</a>
    
    </span>
  </p>




  


  
  
  

  <p class="page__taxonomy">
    <strong><svg class="svg-inline--fa fa-folder-open fa-w-18 fa-fw" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="folder-open" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 576 512" data-fa-i2svg=""><path fill="currentColor" d="M572.694 292.093L500.27 416.248A63.997 63.997 0 0 1 444.989 448H45.025c-18.523 0-30.064-20.093-20.731-36.093l72.424-124.155A64 64 0 0 1 152 256h399.964c18.523 0 30.064 20.093 20.73 36.093zM152 224h328v-48c0-26.51-21.49-48-48-48H272l-64-64H48C21.49 64 0 85.49 0 112v278.046l69.077-118.418C86.214 242.25 117.989 224 152 224z"></path></svg><!-- <i class="fas fa-fw fa-folder-open" aria-hidden="true"></i> --> Categories: </strong>
    <span itemprop="keywords">
    
      
      
      <a href="https://www.jaiminton.com/categories/#practicalmalwareanalysis" class="page__taxonomy-item" rel="tag">PracticalMalwareAnalysis</a><span class="sep">, </span>
    
      
      
      <a href="https://www.jaiminton.com/categories/#reverse-engineering" class="page__taxonomy-item" rel="tag">Reverse Engineering</a><span class="sep">, </span>
    
      
      
      <a href="https://www.jaiminton.com/categories/#tutorials" class="page__taxonomy-item" rel="tag">Tutorials</a><span class="sep">, </span>
    
      
      
      <a href="https://www.jaiminton.com/categories/#windows" class="page__taxonomy-item" rel="tag">Windows</a>
    
    </span>
  </p>


        
          <p class="page__date"><strong><svg class="svg-inline--fa fa-calendar-alt fa-w-14 fa-fw" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="calendar-alt" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512" data-fa-i2svg=""><path fill="currentColor" d="M0 464c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V192H0v272zm320-196c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12h-40c-6.6 0-12-5.4-12-12v-40zm0 128c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12h-40c-6.6 0-12-5.4-12-12v-40zM192 268c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12h-40c-6.6 0-12-5.4-12-12v-40zm0 128c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12h-40c-6.6 0-12-5.4-12-12v-40zM64 268c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12H76c-6.6 0-12-5.4-12-12v-40zm0 128c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12H76c-6.6 0-12-5.4-12-12v-40zM400 64h-48V16c0-8.8-7.2-16-16-16h-32c-8.8 0-16 7.2-16 16v48H160V16c0-8.8-7.2-16-16-16h-32c-8.8 0-16 7.2-16 16v48H48C21.5 64 0 85.5 0 112v48h448v-48c0-26.5-21.5-48-48-48z"></path></svg><!-- <i class="fas fa-fw fa-calendar-alt" aria-hidden="true"></i> --> Updated:</strong> <time datetime="2023-11-13">November 13, 2023</time></p>
        
      </footer>

      <section class="page__share">
  
    <h4 class="page__share-title">Share on</h4>
  

  <a href="https://twitter.com/intent/tweet?via=CyberRaiju&amp;text=Practical+Malware+Analysis+-+Chapter+9+Lab+Write-up%20https%3A%2F%2Fwww.jaiminton.com%2FTutorials%2FPracticalMalwareAnalysis%2FChapter9%2F" class="btn btn--twitter" onclick="window.open(this.href, 'window', 'left=20,top=20,width=500,height=500,toolbar=1,resizable=0'); return false;" title="Share on Twitter"><svg class="svg-inline--fa fa-twitter fa-w-16 fa-fw" aria-hidden="true" focusable="false" data-prefix="fab" data-icon="twitter" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" data-fa-i2svg=""><path fill="currentColor" d="M459.37 151.716c.325 4.548.325 9.097.325 13.645 0 138.72-105.583 298.558-298.558 298.558-59.452 0-114.68-17.219-161.137-47.106 8.447.974 16.568 1.299 25.34 1.299 49.055 0 94.213-16.568 130.274-44.832-46.132-.975-84.792-31.188-98.112-72.772 6.498.974 12.995 1.624 19.818 1.624 9.421 0 18.843-1.3 27.614-3.573-48.081-9.747-84.143-51.98-84.143-102.985v-1.299c13.969 7.797 30.214 12.67 47.431 13.319-28.264-18.843-46.781-51.005-46.781-87.391 0-19.492 5.197-37.36 14.294-52.954 51.655 63.675 129.3 105.258 216.365 109.807-1.624-7.797-2.599-15.918-2.599-24.04 0-57.828 46.782-104.934 104.934-104.934 30.213 0 57.502 12.67 76.67 33.137 23.715-4.548 46.456-13.32 66.599-25.34-7.798 24.366-24.366 44.833-46.132 57.827 21.117-2.273 41.584-8.122 60.426-16.243-14.292 20.791-32.161 39.308-52.628 54.253z"></path></svg><!-- <i class="fab fa-fw fa-twitter" aria-hidden="true"></i> --><span> Twitter</span></a>

  <a href="https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fwww.jaiminton.com%2FTutorials%2FPracticalMalwareAnalysis%2FChapter9%2F" class="btn btn--facebook" onclick="window.open(this.href, 'window', 'left=20,top=20,width=500,height=500,toolbar=1,resizable=0'); return false;" title="Share on Facebook"><svg class="svg-inline--fa fa-facebook fa-w-14 fa-fw" aria-hidden="true" focusable="false" data-prefix="fab" data-icon="facebook" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512" data-fa-i2svg=""><path fill="currentColor" d="M448 56.7v398.5c0 13.7-11.1 24.7-24.7 24.7H309.1V306.5h58.2l8.7-67.6h-67v-43.2c0-19.6 5.4-32.9 33.5-32.9h35.8v-60.5c-6.2-.8-27.4-2.7-52.2-2.7-51.6 0-87 31.5-87 89.4v49.9h-58.4v67.6h58.4V480H24.7C11.1 480 0 468.9 0 455.3V56.7C0 43.1 11.1 32 24.7 32h398.5c13.7 0 24.8 11.1 24.8 24.7z"></path></svg><!-- <i class="fab fa-fw fa-facebook" aria-hidden="true"></i> --><span> Facebook</span></a>

  <a href="https://www.linkedin.com/shareArticle?mini=true&amp;url=https%3A%2F%2Fwww.jaiminton.com%2FTutorials%2FPracticalMalwareAnalysis%2FChapter9%2F" class="btn btn--linkedin" onclick="window.open(this.href, 'window', 'left=20,top=20,width=500,height=500,toolbar=1,resizable=0'); return false;" title="Share on LinkedIn"><svg class="svg-inline--fa fa-linkedin fa-w-14 fa-fw" aria-hidden="true" focusable="false" data-prefix="fab" data-icon="linkedin" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512" data-fa-i2svg=""><path fill="currentColor" d="M416 32H31.9C14.3 32 0 46.5 0 64.3v383.4C0 465.5 14.3 480 31.9 480H416c17.6 0 32-14.5 32-32.3V64.3c0-17.8-14.4-32.3-32-32.3zM135.4 416H69V202.2h66.5V416zm-33.2-243c-21.3 0-38.5-17.3-38.5-38.5S80.9 96 102.2 96c21.2 0 38.5 17.3 38.5 38.5 0 21.3-17.2 38.5-38.5 38.5zm282.1 243h-66.4V312c0-24.8-.5-56.7-34.5-56.7-34.6 0-39.9 27-39.9 54.9V416h-66.4V202.2h63.7v29.2h.9c8.9-16.8 30.6-34.5 62.9-34.5 67.2 0 79.7 44.3 79.7 101.9V416z"></path></svg><!-- <i class="fab fa-fw fa-linkedin" aria-hidden="true"></i> --><span> LinkedIn</span></a>
</section>


      
  <nav class="pagination">
    
      <a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter8/" class="pagination--pager" title="Practical Malware Analysis - Chapter 8 Lab Write-up
">Previous</a>
    
    
      <a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Conclusion/" class="pagination--pager" title="Practical Malware Analysis - Conclusion Lab Write-up
">Next</a>
    
  </nav>

    </div>

    
  </article>

  
  
    <div class="page__related">
      <h4 class="page__related-title">You may also enjoy</h4>
      <div class="grid__wrapper">
        
          



<div class="grid__item">
  <article class="archive__item" itemscope="" itemtype="https://schema.org/CreativeWork">
    
      <div class="archive__item-teaser">
        <img src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/amos-stealer.jpg" alt="">
      </div>
    
    <h2 class="archive__item-title" itemprop="headline">
      
        <a href="https://www.jaiminton.com/reverse-engineering/atomic-macos-stealer-amos" rel="permalink">Atomic MacOS Stealer (AMOS) - Malware Analysis Lab
</a>
      
    </h2>
    
      <p class="page__meta"><svg class="svg-inline--fa fa-clock fa-w-16" aria-hidden="true" focusable="false" data-prefix="far" data-icon="clock" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" data-fa-i2svg=""><path fill="currentColor" d="M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm0 448c-110.5 0-200-89.5-200-200S145.5 56 256 56s200 89.5 200 200-89.5 200-200 200zm61.8-104.4l-84.9-61.7c-3.1-2.3-4.9-5.9-4.9-9.7V116c0-6.6 5.4-12 12-12h32c6.6 0 12 5.4 12 12v141.7l66.8 48.6c5.4 3.9 6.5 11.4 2.6 16.8L334.6 349c-3.9 5.3-11.4 6.5-16.8 2.6z"></path></svg><!-- <i class="far fa-clock" aria-hidden="true"></i> --> 




  23 minute read
</p>
    
    <p class="archive__item-excerpt" itemprop="description">Analysis of Atomic MacOS Stealer (AMOS) distributed through fake Homebrew domains
</p>
  </article>
</div>

        
          



<div class="grid__item">
  <article class="archive__item" itemscope="" itemtype="https://schema.org/CreativeWork">
    
      <div class="archive__item-teaser">
        <img src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/wasabiwallet.jpg" alt="">
      </div>
    
    <h2 class="archive__item-title" itemprop="headline">
      
        <a href="https://www.jaiminton.com/reverse-engineering/wasabi-cryptoshuffler-turs" rel="permalink">Cryptoshuffler/TURS Agent - Malware Analysis Lab
</a>
      
    </h2>
    
      <p class="page__meta"><svg class="svg-inline--fa fa-clock fa-w-16" aria-hidden="true" focusable="false" data-prefix="far" data-icon="clock" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" data-fa-i2svg=""><path fill="currentColor" d="M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm0 448c-110.5 0-200-89.5-200-200S145.5 56 256 56s200 89.5 200 200-89.5 200-200 200zm61.8-104.4l-84.9-61.7c-3.1-2.3-4.9-5.9-4.9-9.7V116c0-6.6 5.4-12 12-12h32c6.6 0 12 5.4 12 12v141.7l66.8 48.6c5.4 3.9 6.5 11.4 2.6 16.8L334.6 349c-3.9 5.3-11.4 6.5-16.8 2.6z"></path></svg><!-- <i class="far fa-clock" aria-hidden="true"></i> --> 




  19 minute read
</p>
    
    <p class="archive__item-excerpt" itemprop="description">Analysis of a backoored Wasabi Wallet installer and how it deploys TURS Agent onto a system
</p>
  </article>
</div>

        
          



<div class="grid__item">
  <article class="archive__item" itemscope="" itemtype="https://schema.org/CreativeWork">
    
      <div class="archive__item-teaser">
        <img src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/asyncrat.jpg" alt="">
      </div>
    
    <h2 class="archive__item-title" itemprop="headline">
      
        <a href="https://www.jaiminton.com/reverse-engineering/asyncrat" rel="permalink">AsyncRAT Injector - Malware Analysis Lab
</a>
      
    </h2>
    
      <p class="page__meta"><svg class="svg-inline--fa fa-clock fa-w-16" aria-hidden="true" focusable="false" data-prefix="far" data-icon="clock" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" data-fa-i2svg=""><path fill="currentColor" d="M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm0 448c-110.5 0-200-89.5-200-200S145.5 56 256 56s200 89.5 200 200-89.5 200-200 200zm61.8-104.4l-84.9-61.7c-3.1-2.3-4.9-5.9-4.9-9.7V116c0-6.6 5.4-12 12-12h32c6.6 0 12 5.4 12 12v141.7l66.8 48.6c5.4 3.9 6.5 11.4 2.6 16.8L334.6 349c-3.9 5.3-11.4 6.5-16.8 2.6z"></path></svg><!-- <i class="far fa-clock" aria-hidden="true"></i> --> 




  27 minute read
</p>
    
    <p class="archive__item-excerpt" itemprop="description">Analysis of an AsyncRAT downloader, reflective loader, injector, and perfoming AES decryption using CyberChef
</p>
  </article>
</div>

        
          



<div class="grid__item">
  <article class="archive__item" itemscope="" itemtype="https://schema.org/CreativeWork">
    
      <div class="archive__item-teaser">
        <img src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/idatloader.jpg" alt="">
      </div>
    
    <h2 class="archive__item-title" itemprop="headline">
      
        <a href="https://www.jaiminton.com/reverse-engineering/idat-loader" rel="permalink">IDAT Loader - Malware Analysis Lab
</a>
      
    </h2>
    
      <p class="page__meta"><svg class="svg-inline--fa fa-clock fa-w-16" aria-hidden="true" focusable="false" data-prefix="far" data-icon="clock" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" data-fa-i2svg=""><path fill="currentColor" d="M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm0 448c-110.5 0-200-89.5-200-200S145.5 56 256 56s200 89.5 200 200-89.5 200-200 200zm61.8-104.4l-84.9-61.7c-3.1-2.3-4.9-5.9-4.9-9.7V116c0-6.6 5.4-12 12-12h32c6.6 0 12 5.4 12 12v141.7l66.8 48.6c5.4 3.9 6.5 11.4 2.6 16.8L334.6 349c-3.9 5.3-11.4 6.5-16.8 2.6z"></path></svg><!-- <i class="far fa-clock" aria-hidden="true"></i> --> 




  39 minute read
</p>
    
    <p class="archive__item-excerpt" itemprop="description">Analysis of IDAT Loader RAT, an advanced malware-as-a-service injector
</p>
  </article>
</div>

        
      </div>
    </div>
  
  
</div>

    </div>

    
      <div class="search-content">
        <div class="search-content__inner-wrap"><input type="text" id="search" class="search-input" tabindex="-1" placeholder="Enter your search term...">
    <div id="results" class="results"></div></div>

      </div>
    

    <div class="page__footer">
      <footer>
        <!-- start custom footer snippets -->

<!-- end custom footer snippets -->
        <div class="page__footer-follow">
  <ul class="social-icons">
    
      <li><strong>Follow:</strong></li>
    

    
      
        
          <li><a href="https://app.hackthebox.com/profile/10636" rel="nofollow noopener noreferrer"><svg class="svg-inline--fa fa-box fa-w-16" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="box" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" data-fa-i2svg=""><path fill="currentColor" d="M509.5 184.6L458.9 32.8C452.4 13.2 434.1 0 413.4 0H272v192h238.7c-.4-2.5-.4-5-1.2-7.4zM240 0H98.6c-20.7 0-39 13.2-45.5 32.8L2.5 184.6c-.8 2.4-.8 4.9-1.2 7.4H240V0zM0 224v240c0 26.5 21.5 48 48 48h416c26.5 0 48-21.5 48-48V224H0z"></path></svg><!-- <i class="fas fa-box" aria-hidden="true"></i> --> Hack The Box</a></li>
        
      
        
          <li><a href="https://twitter.com/CyberRaiju" rel="nofollow noopener noreferrer"><svg class="svg-inline--fa fa-twitter-square fa-w-14 fa-fw" aria-hidden="true" focusable="false" data-prefix="fab" data-icon="twitter-square" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512" data-fa-i2svg=""><path fill="currentColor" d="M400 32H48C21.5 32 0 53.5 0 80v352c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48zm-48.9 158.8c.2 2.8.2 5.7.2 8.5 0 86.7-66 186.6-186.6 186.6-37.2 0-71.7-10.8-100.7-29.4 5.3.6 10.4.8 15.8.8 30.7 0 58.9-10.4 81.4-28-28.8-.6-53-19.5-61.3-45.5 10.1 1.5 19.2 1.5 29.6-1.2-30-6.1-52.5-32.5-52.5-64.4v-.8c8.7 4.9 18.9 7.9 29.6 8.3a65.447 65.447 0 0 1-29.2-54.6c0-12.2 3.2-23.4 8.9-33.1 32.3 39.8 80.8 65.8 135.2 68.6-9.3-44.5 24-80.6 64-80.6 18.9 0 35.9 7.9 47.9 20.7 14.8-2.8 29-8.3 41.6-15.8-4.9 15.2-15.2 28-28.8 36.1 13.2-1.4 26-5.1 37.8-10.2-8.9 13.1-20.1 24.7-32.9 34z"></path></svg><!-- <i class="fab fa-fw fa-twitter-square" aria-hidden="true"></i> --> Twitter</a></li>
        
      
        
          <li><a href="https://www.linkedin.com/in/JaiMinton" rel="nofollow noopener noreferrer"><svg class="svg-inline--fa fa-linkedin fa-w-14" aria-hidden="true" focusable="false" data-prefix="fab" data-icon="linkedin" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512" data-fa-i2svg=""><path fill="currentColor" d="M416 32H31.9C14.3 32 0 46.5 0 64.3v383.4C0 465.5 14.3 480 31.9 480H416c17.6 0 32-14.5 32-32.3V64.3c0-17.8-14.4-32.3-32-32.3zM135.4 416H69V202.2h66.5V416zm-33.2-243c-21.3 0-38.5-17.3-38.5-38.5S80.9 96 102.2 96c21.2 0 38.5 17.3 38.5 38.5 0 21.3-17.2 38.5-38.5 38.5zm282.1 243h-66.4V312c0-24.8-.5-56.7-34.5-56.7-34.6 0-39.9 27-39.9 54.9V416h-66.4V202.2h63.7v29.2h.9c8.9-16.8 30.6-34.5 62.9-34.5 67.2 0 79.7 44.3 79.7 101.9V416z"></path></svg><!-- <i class="fab fa-linkedin" aria-hidden="true"></i> --> LinkedIN</a></li>
        
      
        
          <li><a href="https://github.com/JPMinty" rel="nofollow noopener noreferrer"><svg class="svg-inline--fa fa-github fa-w-16 fa-fw" aria-hidden="true" focusable="false" data-prefix="fab" data-icon="github" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 496 512" data-fa-i2svg=""><path fill="currentColor" d="M165.9 397.4c0 2-2.3 3.6-5.2 3.6-3.3.3-5.6-1.3-5.6-3.6 0-2 2.3-3.6 5.2-3.6 3-.3 5.6 1.3 5.6 3.6zm-31.1-4.5c-.7 2 1.3 4.3 4.3 4.9 2.6 1 5.6 0 6.2-2s-1.3-4.3-4.3-5.2c-2.6-.7-5.5.3-6.2 2.3zm44.2-1.7c-2.9.7-4.9 2.6-4.6 4.9.3 2 2.9 3.3 5.9 2.6 2.9-.7 4.9-2.6 4.6-4.6-.3-1.9-3-3.2-5.9-2.9zM244.8 8C106.1 8 0 113.3 0 252c0 110.9 69.8 205.8 169.5 239.2 12.8 2.3 17.3-5.6 17.3-12.1 0-6.2-.3-40.4-.3-61.4 0 0-70 15-84.7-29.8 0 0-11.4-29.1-27.8-36.6 0 0-22.9-15.7 1.6-15.4 0 0 24.9 2 38.6 25.8 21.9 38.6 58.6 27.5 72.9 20.9 2.3-16 8.8-27.1 16-33.7-55.9-6.2-112.3-14.3-112.3-110.5 0-27.5 7.6-41.3 23.6-58.9-2.6-6.5-11.1-33.3 2.6-67.9 20.9-6.5 69 27 69 27 20-5.6 41.5-8.5 62.8-8.5s42.8 2.9 62.8 8.5c0 0 48.1-33.6 69-27 13.7 34.7 5.2 61.4 2.6 67.9 16 17.7 25.8 31.5 25.8 58.9 0 96.5-58.9 104.2-114.8 110.5 9.2 7.9 17 22.9 17 46.4 0 33.7-.3 75.4-.3 83.6 0 6.5 4.6 14.4 17.3 12.1C428.2 457.8 496 362.9 496 252 496 113.3 383.5 8 244.8 8zM97.2 352.9c-1.3 1-1 3.3.7 5.2 1.6 1.6 3.9 2.3 5.2 1 1.3-1 1-3.3-.7-5.2-1.6-1.6-3.9-2.3-5.2-1zm-10.8-8.1c-.7 1.3.3 2.9 2.3 3.9 1.6 1 3.6.7 4.3-.7.7-1.3-.3-2.9-2.3-3.9-2-.6-3.6-.3-4.3.7zm32.4 35.6c-1.6 1.3-1 4.3 1.3 6.2 2.3 2.3 5.2 2.6 6.5 1 1.3-1.3.7-4.3-1.3-6.2-2.2-2.3-5.2-2.6-6.5-1zm-11.4-14.7c-1.6 1-1.6 3.6 0 5.9 1.6 2.3 4.3 3.3 5.6 2.3 1.6-1.3 1.6-3.9 0-6.2-1.4-2.3-4-3.3-5.6-2z"></path></svg><!-- <i class="fab fa-fw fa-github" aria-hidden="true"></i> --> GitHub</a></li>
        
      
        
          <li><a href="https://www.youtube.com/@cyberraiju/featured" rel="nofollow noopener noreferrer"><svg class="svg-inline--fa fa-youtube fa-w-18 fa-fw" aria-hidden="true" focusable="false" data-prefix="fab" data-icon="youtube" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 576 512" data-fa-i2svg=""><path fill="currentColor" d="M549.655 124.083c-6.281-23.65-24.787-42.276-48.284-48.597C458.781 64 288 64 288 64S117.22 64 74.629 75.486c-23.497 6.322-42.003 24.947-48.284 48.597-11.412 42.867-11.412 132.305-11.412 132.305s0 89.438 11.412 132.305c6.281 23.65 24.787 41.5 48.284 47.821C117.22 448 288 448 288 448s170.78 0 213.371-11.486c23.497-6.321 42.003-24.171 48.284-47.821 11.412-42.867 11.412-132.305 11.412-132.305s0-89.438-11.412-132.305zm-317.51 213.508V175.185l142.739 81.205-142.739 81.201z"></path></svg><!-- <i class="fab fa-fw fa-youtube" aria-hidden="true"></i> --> YouTube</a></li>
        
      
        
          <li><a href="https://infosec.exchange/@CyberRaiju" rel="nofollow noopener noreferrer"><svg class="svg-inline--fa fa-mastodon fa-w-14" aria-hidden="true" focusable="false" data-prefix="fab" data-icon="mastodon" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 417 512" data-fa-i2svg=""><path fill="currentColor" d="M417.8 179.1c0-97.2-63.7-125.7-63.7-125.7-62.5-28.7-228.5-28.4-290.4 0 0 0-63.7 28.5-63.7 125.7 0 115.7-6.6 259.4 105.6 289.1 40.5 10.7 75.3 13 103.3 11.4 50.8-2.8 79.3-18.1 79.3-18.1l-1.7-36.9s-36.3 11.4-77.1 10.1c-40.4-1.4-83-4.4-89.6-54-.6-4.4-.9-9-.9-13.9 85.6 20.9 158.6 9.1 178.7 6.7 56.1-6.7 105-41.3 111.2-72.9 9.8-49.8 9-121.5 9-121.5zm-75.1 125.2h-46.6V190.1c0-49.7-64-51.6-64 6.9v62.5h-46.3V197c0-58.5-64-56.6-64-6.9v114.2H75.1c0-122.1-5.2-147.9 18.4-175 25.9-28.9 79.8-30.8 103.8 6.1l11.6 19.5 11.6-19.5c24.1-37.1 78.1-34.8 103.8-6.1 23.7 27.3 18.4 53 18.4 175z"></path></svg><!-- <i class="fab fa-mastodon" aria-hidden="true"></i> --> Mastodon</a></li>
        
      
        
      
        
      
    
  </ul>  
<div class="page__footer-copyright">© 2024 Jai Minton.</div>

      </div></footer>
    </div>
    <div>
    
  <script src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/main.min.js"></script>
  <script data-search-pseudo-elements="" defer="defer" src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/all.js" integrity="sha384-eVEQC9zshBn0rFj4+TU78eNA19HMNigMviK/PU/FFjLXqa/GKPgX58rvt5Z8PLs7" crossorigin="anonymous"></script>




<script src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/lunr.min.js"></script>
<script src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/lunr-store.js"></script>
<script src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/lunr-en.js"></script>



    </div>
  <script>(function(){if (!document.body) return;var js = "window['__CF$cv$params']={r:'889372e85cd2442b',t:'MTcxNjYxODMzMy43OTkwMDA='};_cpo=document.createElement('script');_cpo.nonce='',_cpo.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js',document.getElementsByTagName('head')[0].appendChild(_cpo);";var _0xh = document.createElement('iframe');_0xh.height = 1;_0xh.width = 1;_0xh.style.position = 'absolute';_0xh.style.top = 0;_0xh.style.left = 0;_0xh.style.border = 'none';_0xh.style.visibility = 'hidden';document.body.appendChild(_0xh);function handler() {var _0xi = _0xh.contentDocument || _0xh.contentWindow.document;if (_0xi) {var _0xj = _0xi.createElement('script');_0xj.innerHTML = js;_0xi.getElementsByTagName('head')[0].appendChild(_0xj);}}if (document.readyState !== 'loading') {handler();} else if (window.addEventListener) {document.addEventListener('DOMContentLoaded', handler);} else {var prev = document.onreadystatechange || function () {};document.onreadystatechange = function (e) {prev(e);if (document.readyState !== 'loading') {document.onreadystatechange = prev;handler();}};}})();</script><iframe height="1" width="1" style="position: absolute; top: 0px; left: 0px; border: medium; visibility: hidden;"></iframe><script defer="defer" src="Practical%20Malware%20Analysis%20-%20Chapter%209%20Lab%20Write-up%20Jai%20Minton2_files/vef91dfe02fce4ee0ad053f6de4f175db1715022073587" integrity="sha512-sDIX0kl85v1Cl5tu4WGLZCpH/dV9OHbA4YlKCuCiMmOQIk4buzoYDZSFj+TvC71mOBLh8CDC/REgE0GX0xcbjA==" data-cf-beacon="{&quot;rayId&quot;:&quot;889372e85cd2442b&quot;,&quot;r&quot;:1,&quot;version&quot;:&quot;2024.4.1&quot;,&quot;token&quot;:&quot;96762cd668614a10963969fc4e520d9b&quot;}" crossorigin="anonymous"></script>


</body></html>