<!DOCTYPE html>
<!--
  Minimal Mistakes Jekyll Theme 4.15.2 by Michael Rose
  Copyright 2013-2019 Michael Rose - mademistakes.com | @mmistakes
  Free for personal and commercial use under the MIT license
  https://github.com/mmistakes/minimal-mistakes/blob/master/LICENSE
-->
<html lang="en" class="js fontawesome-i2svg-active fontawesome-i2svg-complete"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
    <meta charset="utf-8">

<!-- begin _includes/seo.html --><title>Practical Malware Analysis - Chapter 10 Lab Write-up : Jai Minton</title>
<meta name="description" content="This details reverse engineering activities and answers for labs contained in the book ‘Practical Malware Analysis’ by Michael Sikorski and Andrew Honig, which is published by No Starch Press.">



<meta property="og:type" content="article">
<meta property="og:locale" content="en_US">
<meta property="og:site_name" content="Jai Minton">
<meta property="og:title" content="Practical Malware Analysis - Chapter 10 Lab Write-up">
<meta property="og:url" content="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter10/">


  <meta property="og:description" content="This details reverse engineering activities and answers for labs contained in the book ‘Practical Malware Analysis’ by Michael Sikorski and Andrew Honig, which is published by No Starch Press.">



  <meta property="og:image" content="https://www.jaiminton.com/assets/images/PMALabCHAPTER10.JPG">



  <meta name="twitter:site" content="@CyberRaiju">
  <meta name="twitter:title" content="Practical Malware Analysis - Chapter 10 Lab Write-up">
  <meta name="twitter:description" content="This details reverse engineering activities and answers for labs contained in the book ‘Practical Malware Analysis’ by Michael Sikorski and Andrew Honig, which is published by No Starch Press.">
  <meta name="twitter:url" content="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter10/">


    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:image" content="https://www.jaiminton.com/assets/images/PMALabCHAPTER10.JPG">
  

  



  <meta property="article:published_time" content="2021-06-05T00:00:00+00:00">



  <meta property="article:modified_time" content="2023-11-13T17:51:03+00:00">



  

  


<style type="text/css">svg:not(:root).svg-inline--fa{overflow:visible}.svg-inline--fa{display:inline-block;font-size:inherit;height:1em;overflow:visible;vertical-align:-.125em}.svg-inline--fa.fa-lg{vertical-align:-.225em}.svg-inline--fa.fa-w-1{width:.0625em}.svg-inline--fa.fa-w-2{width:.125em}.svg-inline--fa.fa-w-3{width:.1875em}.svg-inline--fa.fa-w-4{width:.25em}.svg-inline--fa.fa-w-5{width:.3125em}.svg-inline--fa.fa-w-6{width:.375em}.svg-inline--fa.fa-w-7{width:.4375em}.svg-inline--fa.fa-w-8{width:.5em}.svg-inline--fa.fa-w-9{width:.5625em}.svg-inline--fa.fa-w-10{width:.625em}.svg-inline--fa.fa-w-11{width:.6875em}.svg-inline--fa.fa-w-12{width:.75em}.svg-inline--fa.fa-w-13{width:.8125em}.svg-inline--fa.fa-w-14{width:.875em}.svg-inline--fa.fa-w-15{width:.9375em}.svg-inline--fa.fa-w-16{width:1em}.svg-inline--fa.fa-w-17{width:1.0625em}.svg-inline--fa.fa-w-18{width:1.125em}.svg-inline--fa.fa-w-19{width:1.1875em}.svg-inline--fa.fa-w-20{width:1.25em}.svg-inline--fa.fa-pull-left{margin-right:.3em;width:auto}.svg-inline--fa.fa-pull-right{margin-left:.3em;width:auto}.svg-inline--fa.fa-border{height:1.5em}.svg-inline--fa.fa-li{width:2em}.svg-inline--fa.fa-fw{width:1.25em}.fa-layers svg.svg-inline--fa{bottom:0;left:0;margin:auto;position:absolute;right:0;top:0}.fa-layers{display:inline-block;height:1em;position:relative;text-align:center;vertical-align:-.125em;width:1em}.fa-layers svg.svg-inline--fa{-webkit-transform-origin:center center;transform-origin:center center}.fa-layers-counter,.fa-layers-text{display:inline-block;position:absolute;text-align:center}.fa-layers-text{left:50%;top:50%;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%);-webkit-transform-origin:center center;transform-origin:center center}.fa-layers-counter{background-color:#ff253a;border-radius:1em;-webkit-box-sizing:border-box;box-sizing:border-box;color:#fff;height:1.5em;line-height:1;max-width:5em;min-width:1.5em;overflow:hidden;padding:.25em;right:0;text-overflow:ellipsis;top:0;-webkit-transform:scale(.25);transform:scale(.25);-webkit-transform-origin:top right;transform-origin:top right}.fa-layers-bottom-right{bottom:0;right:0;top:auto;-webkit-transform:scale(.25);transform:scale(.25);-webkit-transform-origin:bottom right;transform-origin:bottom right}.fa-layers-bottom-left{bottom:0;left:0;right:auto;top:auto;-webkit-transform:scale(.25);transform:scale(.25);-webkit-transform-origin:bottom left;transform-origin:bottom left}.fa-layers-top-right{right:0;top:0;-webkit-transform:scale(.25);transform:scale(.25);-webkit-transform-origin:top right;transform-origin:top right}.fa-layers-top-left{left:0;right:auto;top:0;-webkit-transform:scale(.25);transform:scale(.25);-webkit-transform-origin:top left;transform-origin:top left}.fa-lg{font-size:1.3333333333em;line-height:.75em;vertical-align:-.0667em}.fa-xs{font-size:.75em}.fa-sm{font-size:.875em}.fa-1x{font-size:1em}.fa-2x{font-size:2em}.fa-3x{font-size:3em}.fa-4x{font-size:4em}.fa-5x{font-size:5em}.fa-6x{font-size:6em}.fa-7x{font-size:7em}.fa-8x{font-size:8em}.fa-9x{font-size:9em}.fa-10x{font-size:10em}.fa-fw{text-align:center;width:1.25em}.fa-ul{list-style-type:none;margin-left:2.5em;padding-left:0}.fa-ul>li{position:relative}.fa-li{left:-2em;position:absolute;text-align:center;width:2em;line-height:inherit}.fa-border{border:solid .08em #eee;border-radius:.1em;padding:.2em .25em .15em}.fa-pull-left{float:left}.fa-pull-right{float:right}.fa.fa-pull-left,.fab.fa-pull-left,.fal.fa-pull-left,.far.fa-pull-left,.fas.fa-pull-left{margin-right:.3em}.fa.fa-pull-right,.fab.fa-pull-right,.fal.fa-pull-right,.far.fa-pull-right,.fas.fa-pull-right{margin-left:.3em}.fa-spin{-webkit-animation:fa-spin 2s infinite linear;animation:fa-spin 2s infinite linear}.fa-pulse{-webkit-animation:fa-spin 1s infinite steps(8);animation:fa-spin 1s infinite steps(8)}@-webkit-keyframes fa-spin{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@keyframes fa-spin{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}.fa-rotate-90{-webkit-transform:rotate(90deg);transform:rotate(90deg)}.fa-rotate-180{-webkit-transform:rotate(180deg);transform:rotate(180deg)}.fa-rotate-270{-webkit-transform:rotate(270deg);transform:rotate(270deg)}.fa-flip-horizontal{-webkit-transform:scale(-1,1);transform:scale(-1,1)}.fa-flip-vertical{-webkit-transform:scale(1,-1);transform:scale(1,-1)}.fa-flip-both,.fa-flip-horizontal.fa-flip-vertical{-webkit-transform:scale(-1,-1);transform:scale(-1,-1)}:root .fa-flip-both,:root .fa-flip-horizontal,:root .fa-flip-vertical,:root .fa-rotate-180,:root .fa-rotate-270,:root .fa-rotate-90{-webkit-filter:none;filter:none}.fa-stack{display:inline-block;height:2em;position:relative;width:2.5em}.fa-stack-1x,.fa-stack-2x{bottom:0;left:0;margin:auto;position:absolute;right:0;top:0}.svg-inline--fa.fa-stack-1x{height:1em;width:1.25em}.svg-inline--fa.fa-stack-2x{height:2em;width:2.5em}.fa-inverse{color:#fff}.sr-only{border:0;clip:rect(0,0,0,0);height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;width:1px}.sr-only-focusable:active,.sr-only-focusable:focus{clip:auto;height:auto;margin:0;overflow:visible;position:static;width:auto}</style><link rel="canonical" href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter10/">





  <script type="application/ld+json">
    {
      "@context": "https://schema.org",
      "@type": "Organization",
      "url": "https://www.jaiminton.com",
      "logo": "https://www.jaiminton.com/assets/images/feature-logo.jpg"
    }
  </script>



  <script type="application/ld+json">
    {
      "@context": "https://schema.org",
      "@type": "Person",
      "name": "CyberRaiju",
      "url": "https://www.jaiminton.com",
      "sameAs": null
    }
  </script>







<!-- end _includes/seo.html -->


<link href="https://www.jaiminton.com/feed.xml" type="application/atom+xml" rel="alternate" title="Jai Minton Feed">

<!-- https://t.co/dKP3o1e -->
<meta name="viewport" content="width=device-width, initial-scale=1.0">

<script>
  document.documentElement.className = document.documentElement.className.replace(/\bno-js\b/g, '') + ' js ';
</script>

<!-- For all browsers -->
<link rel="stylesheet" href="Practical%20Malware%20Analysis%20-%20Chapter%2010%20Lab%20Write-up%20Jai%20Minton_files/main.css">

<!--[if IE ]>
  <style>
    /* old IE unsupported flexbox fixes */
    .greedy-nav .site-title {
      padding-right: 3em;
    }
    .greedy-nav button {
      position: absolute;
      top: 0;
      right: 0;
      height: 100%;
    }
  </style>
<![endif]-->



    <!-- start custom head snippets -->
<script src="Practical%20Malware%20Analysis%20-%20Chapter%2010%20Lab%20Write-up%20Jai%20Minton_files/particles.js"></script>
<script>/* particlesJS.load(@dom-id, @path-json, @callback (optional)); */
  particlesJS.load('pixels', '/assets/particlesjs-config.json', function() {
  console.log('callback - particles.js config loaded');
  });</script>
<!-- insert favicons. use https://realfavicongenerator.net/ -->
<link rel="apple-touch-icon" sizes="180x180" href="https://www.jaiminton.com/apple-touch-icon.png">
<link rel="icon" type="image/png" sizes="32x32" href="https://www.jaiminton.com/favicon-32x32.png">
<link rel="icon" type="image/png" sizes="16x16" href="https://www.jaiminton.com/favicon-16x16.png">
<link rel="manifest" href="https://www.jaiminton.com/site.webmanifest">
<link rel="mask-icon" href="https://www.jaiminton.com/safari-pinned-tab.svg" color="#5bbad5">
<meta name="msapplication-TileColor" content="#da532c">
<meta name="theme-color" content="#ffffff">
<meta http-equiv="Content-Security-Policy" content="default-src 'self' https://www.youtube-nocookie.com/;script-src 'self' 'unsafe-inline' 'unsafe-eval' https://platform.twitter.com/ https://www.youtube-nocookie.com/ https://static.cloudflareinsights.com/ https://www.google-analytics.com use.fontawesome.com https://googletagmanager.com https://www.googletagmanager.com https://platform.twitter.com/widgets.js;img-src 'self' 'unsafe-inline' https://www.hackthebox.eu https://cards-dev.twitter.com/ https://www.youtube-nocookie.com/;style-src 'self' 'unsafe-inline';upgrade-insecure-requests">
<meta http-equiv="X-Frame-Options" content="SAMEORIGIN">
<meta http-equiv="X-XSS-Protection" content="1; mode=block">
<meta http-equiv="X-Content-Type-Option" content="nosniff">
<meta http-equiv="Strict-Transport-Security" content="max-age=31536000; includeSubDomains">
<!-- end custom head snippets -->

    
  <style id="fit-vids-style">.fluid-width-video-wrapper{width:100%;position:relative;padding:0;}.fluid-width-video-wrapper iframe,.fluid-width-video-wrapper object,.fluid-width-video-wrapper embed {position:absolute;top:0;left:0;width:100%;height:100%;}</style></head>
  <body class="layout--single wide" style="margin-bottom: 201.883px;">
    <!--[if lt IE 9]>
<div class="notice--danger align-center" style="margin: 0;">You are using an <strong>outdated</strong> browser. Please <a href="https://browsehappy.com/">upgrade your browser</a> to improve your experience.</div>
<![endif]-->

    

<div class="masthead">
  <div class="masthead__inner-wrap">
    <div class="masthead__menu">
      <nav id="site-nav" class="greedy-nav">
        
          <a class="site-logo" href="https://www.jaiminton.com/"><img src="Practical%20Malware%20Analysis%20-%20Chapter%2010%20Lab%20Write-up%20Jai%20Minton_files/rootdir.png" alt=""></a>
        
        <a class="site-title" href="https://www.jaiminton.com/">CyberRaiju</a>
        <ul class="visible-links"><li class="masthead__menu-item">
              <a href="https://www.jaiminton.com/tags/">📗 Browse</a>
            </li><li class="masthead__menu-item">
              <a href="https://www.jaiminton.com/categories/">📙 Categories</a>
            </li><li class="masthead__menu-item">
              <a href="https://www.jaiminton.com/about/">❓ About Me/Privacy</a>
            </li></ul>
        
        <button class="search__toggle" type="button">
          <span class="visually-hidden">Toggle search</span>
          <svg class="icon" width="16" height="16" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.99 16">
            <path d="M15.5,13.12L13.19,10.8a1.69,1.69,0,0,0-1.28-.55l-0.06-.06A6.5,6.5,0,0,0,5.77,0,6.5,6.5,0,0,0,2.46,11.59a6.47,6.47,0,0,0,7.74.26l0.05,0.05a1.65,1.65,0,0,0,.5,1.24l2.38,2.38A1.68,1.68,0,0,0,15.5,13.12ZM6.4,2A4.41,4.41,0,1,1,2,6.4,4.43,4.43,0,0,1,6.4,2Z" transform="translate(-.01)"></path>
          </svg>
        </button>
        
        <button class="greedy-nav__toggle" type="button" style="" count="1">
          <span class="visually-hidden">Toggle menu</span>
          <div class="navicon"></div>
        </button>
        <ul class="hidden-links hidden"><li class="masthead__menu-item">
              <a href="https://buymeacoff.ee/JaiMinton">☕ Buy me a coffee</a>
            </li></ul>
      </nav>
    </div>
  </div>
</div>

    <div class="initial-content">
      


  
    



<nav class="breadcrumbs">
  <ol itemscope="" itemtype="https://schema.org/BreadcrumbList">
    
    
    
      
        <li itemprop="itemListElement" itemscope="" itemtype="https://schema.org/ListItem">
          <a href="https://www.jaiminton.com/" itemprop="item"><span itemprop="name">Home</span></a>
          <meta itemprop="position" content="1">
        </li>
        <span class="sep">/</span>
      
      
        
        <li itemprop="itemListElement" itemscope="" itemtype="https://schema.org/ListItem">
          <a href="https://www.jaiminton.com/categories/#tutorials" itemprop="item"><span itemprop="name">Tutorials</span></a>
          <meta itemprop="position" content="2">
        </li>
        <span class="sep">/</span>
      
    
      
      
        
        <li itemprop="itemListElement" itemscope="" itemtype="https://schema.org/ListItem">
          <a href="https://www.jaiminton.com/categories/#practicalmalwareanalysis" itemprop="item"><span itemprop="name">Practicalmalwareanalysis</span></a>
          <meta itemprop="position" content="3">
        </li>
        <span class="sep">/</span>
      
    
      
      
        <li class="current">Practical Malware Analysis - Chapter 10 Lab Write-up</li>
      
    
  </ol>
</nav>

  


<div id="main" role="main">
  
  <div class="sidebar">
  
  
    
      
        <img src="Practical%20Malware%20Analysis%20-%20Chapter%2010%20Lab%20Write-up%20Jai%20Minton_files/PMALab.JPG" alt="Practical Malware Analysis - Lab Write-Up">
      
      <h3>Practical Malware Analysis - Lab Write-Up</h3>
      <p>This details reverse engineering activities and answers for 
labs contained in the book ‘Practical Malware Analysis’ by Michael 
Sikorski and Andrew Honig, which is published by No Starch Press.</p>

      

<nav class="nav__list">
  
  <input id="ac-toc" name="accordion-toc" type="checkbox">
  <label for="ac-toc">Toggle menu</label>
  <ul class="nav__items">
    
      <li>
        
          <span class="nav__sub-title">📌 Introduction</span>
        

        
        <ul>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/" class="">Start</a></li>
          
        </ul>
        
      </li>
    
      <li>
        
          <span class="nav__sub-title">🔬 1. Basic Static Techniques</span>
        

        
        <ul>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter1/" class="">Start</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter1/#lab-1-1" class="">Lab 1-1 (Lab01-01.exe and Lab01-01.dll)</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter1/#lab-1-2" class="">Lab 1-2 (Lab01-02.exe)</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter1/#lab-1-3" class="">Lab 1-3 (Lab01-03.exe)</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter1/#lab-1-4" class="">Lab 1-4 (Lab01-04.exe)</a></li>
          
        </ul>
        
      </li>
    
      <li>
        
          <span class="nav__sub-title">💻 2. Malware Analysis in Virtual Machines</span>
        

        
        <ul>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter2/" class="">Start</a></li>
          
        </ul>
        
      </li>
    
      <li>
        
          <span class="nav__sub-title">🏃 3. Basic Dynamic Analysis</span>
        

        
        <ul>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter3/" class="">Start</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter3/#lab-3-1" class="">Lab 3-1 (Lab03-01.exe)</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter3/#lab-3-2" class="">Lab 3-2 (Lab03-02.dll)</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter3/#lab-3-3" class="">Lab 3-3 (Lab03-03.exe)</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter3/#lab-3-4" class="">Lab 3-3 (Lab03-04.exe)</a></li>
          
        </ul>
        
      </li>
    
      <li>
        
          <span class="nav__sub-title">🔩 4. A Crash Course in x86 Disassembly</span>
        

        
        <ul>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter4/" class="">Start</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter4/#levels-of-abstraction" class="">Levels of Abstraction</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter4/#main-memory" class="">Main Memory</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter4/#instructions" class="">Instructions</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter4/#operands" class="">Opcodes and Endianness</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter4/#registers" class="">Registers</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter4/#simple-instructions" class="">Simple Instructions</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter4/#simple-instructions" class="">The Stack</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter4/#simple-instructions" class="">Conditionals</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter4/#branching" class="">Branching</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter4/#rep-instructions" class="">Rep Instructions</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter4/#c-main-methods-and-offsets" class="">C Main Methods and Offsets</a></li>
          
        </ul>
        
      </li>
    
      <li>
        
          <span class="nav__sub-title">🎊 5. IDA Pro</span>
        

        
        <ul>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter5/" class="">Start</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter5/#lab-5-1" class="">Lab 5-1 (Lab05-01.dll)</a></li>
          
        </ul>
        
      </li>
    
      <li>
        
          <span class="nav__sub-title">🎐 6. Recognizing C Code Constructs in Assembly</span>
        

        
        <ul>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter6/" class="">Start</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter6/#lab-6-1" class="">Lab 6-1 (Lab06-01.exe)</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter6/#lab-6-2" class="">Lab 6-2 (Lab06-02.exe)</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter6/#lab-6-3" class="">Lab 6-3 (Lab06-03.exe)</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter6/#lab-6-4" class="">Lab 6-4 (Lab06-04.exe)</a></li>
          
        </ul>
        
      </li>
    
      <li>
        
          <span class="nav__sub-title">👹 7. Analyzing Malicious Windows Programs</span>
        

        
        <ul>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter7/" class="">Start</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter7/#lab-7-1" class="">Lab 7-1 (Lab07-01.exe)</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter7/#lab-7-2" class="">Lab 7-2 (Lab07-02.exe)</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter7/#lab-7-3" class="">Lab 7-3 (Lab07-03.exe and Lab07-03.dll)</a></li>
          
        </ul>
        
      </li>
    
      <li>
        
          <span class="nav__sub-title">🐛 8. Debugging</span>
        

        
        <ul>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter8/" class="">Start</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter8/#source-level-vs-assembly-level-debuggers" class="">Source-Level vs. Assembly-Level Debuggers</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter8/#kernel-vs-user-mode-debugging" class="">Kernel vs. User-Mode Debugging</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter8/#using-a-debugger" class="">Using a Debugger</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter8/#exceptions" class="">Exceptions</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter8/#modifying-execution-with-a-debugger" class="">Modifying Execution with a Debugger</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter8/#modifying-program-execution-in-practice" class="">Modifying Program Execution in Practice</a></li>
          
        </ul>
        
      </li>
    
      <li>
        
          <span class="nav__sub-title">🪲 9. OllyDbg</span>
        

        
        <ul>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter9/" class="">Start</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter9/#lab-9-1" class="">Lab 9-1 (Lab09-01.exe)</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter9/#lab-9-2" class="">Lab 9-2 (Lab09-02.exe)</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter9/#lab-9-3" class="">Lab 9-3 (Lab09-03.exe)</a></li>
          
        </ul>
        
      </li>
    
      <li>
        
          <span class="nav__sub-title">🌠 10. Kernel Debugging with WinDbg</span>
        

        
        <ul>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter10/" class="active">Start</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter10/#useful-windbg-commands" class="">Useful Windbg Commands</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter10/#lab-10-1" class="">Lab 10-1 (Lab10-01.exe and Lab10-01.sys)</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter10/#lab-10-2" class="">Lab 10-2 (Lab10-02.exe)</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter10/#lab-10-3" class="">Lab 10-3 (Lab10-03.exe and Lab10-03.sys)</a></li>
          
        </ul>
        
      </li>
    
      <li>
        
          <span class="nav__sub-title">📡 11. Malware Behavior</span>
        

        
        <ul>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter11/" class="">Start</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter11/#lab-11-1" class="">Lab 11-1 (Lab11-01.exe and Lab11-01.sys)</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter11/#lab-11-2" class="">Lab 11-2 (Lab11-02.dll and Lab11-02.ini)</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter11/#lab-11-3" class="">Lab 11-3 (Lab11-03.exe and Lab11-03.dll)</a></li>
          
        </ul>
        
      </li>
    
      <li>
        
          <span class="nav__sub-title">👽 12. Covert Malware Launching</span>
        

        
        <ul>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter12/" class="">Start</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter12/#lab-12-1" class="">Lab 12-1 (Lab12-01.exe and Lab12-01.dll)</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter12/#lab-12-2" class="">Lab 12-2 (Lab12-02.exe)</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter12/#lab-12-3" class="">Lab 12-3 (Lab12-03.exe)</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter12/#lab-12-4" class="">Lab 12-4 (Lab12-04.exe)</a></li>
          
        </ul>
        
      </li>
    
      <li>
        
          <span class="nav__sub-title">💥 13. Data Encoding</span>
        

        
        <ul>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter13/" class="">Start</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter13/#lab-13-1" class="">Lab 13-1 (Lab13-01.exe)</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter13/#lab-13-2" class="">Lab 13-2 (Lab13-02.exe)</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter13/#lab-13-3" class="">Lab 13-3 (Lab13-03.exe)</a></li>
          
        </ul>
        
      </li>
    
      <li>
        
          <span class="nav__sub-title">🔎 14. Malware-Focussed Network Signatures</span>
        

        
        <ul>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter14/" class="">Start</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter14/#lab-14-1" class="">Lab 14-1 (Lab14-01.exe)</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter14/#lab-14-2" class="">Lab 14-2 (Lab14-02.exe)</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter14/#lab-14-3" class="">Lab 14-3 (Lab14-03.exe)</a></li>
          
        </ul>
        
      </li>
    
      <li>
        
          <span class="nav__sub-title">🚫 15. Anti-Disassembly</span>
        

        
        <ul>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter15/" class="">Start</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter15/#lab-15-1" class="">Lab 15-1 (Lab15-01.exe)</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter15/#lab-15-2" class="">Lab 15-2 (Lab15-02.exe)</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter15/#lab-15-3" class="">Lab 15-3 (Lab15-03.exe)</a></li>
          
        </ul>
        
      </li>
    
      <li>
        
          <span class="nav__sub-title">❎ 16. Anti-Debugging</span>
        

        
        <ul>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter16/" class="">Start</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter16/#lab-16-1" class="">Lab 16-1 (Lab16-01.exe)</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter16/#lab-16-2" class="">Lab 16-2 (Lab16-02.exe)</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter16/#lab-16-3" class="">Lab 16-3 (Lab16-03.exe)</a></li>
          
        </ul>
        
      </li>
    
      <li>
        
          <span class="nav__sub-title">📵 17. Anti-Virtual Machine Techniques</span>
        

        
        <ul>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter17/" class="">Start</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter17/#lab-17-1" class="">Lab 17-1 (Lab17-01.exe)</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter17/#lab-17-2" class="">Lab 17-2 (Lab17-02.dll)</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter17/#lab-17-3" class="">Lab 17-3 (Lab17-03.exe)</a></li>
          
        </ul>
        
      </li>
    
      <li>
        
          <span class="nav__sub-title">🔳 18. Packers and Unpacking</span>
        

        
        <ul>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter18/" class="">Start</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter18/#lab-18-1" class="">Lab 18-1 (Lab18-01.exe)</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter18/#lab-18-2" class="">Lab 18-2 (Lab18-02.exe)</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter18/#lab-18-3" class="">Lab 18-3 (Lab18-03.exe)</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter18/#lab-18-4" class="">Lab 18-4 (Lab18-04.exe)</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter18/#lab-18-5" class="">Lab 18-5 (Lab18-05.exe)</a></li>
          
        </ul>
        
      </li>
    
      <li>
        
          <span class="nav__sub-title">🐢 19. Shellcode Analysis</span>
        

        
        <ul>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter19/" class="">Start</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter19/#lab-19-1" class="">Lab 19-1 (Lab19-01.exe)</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter19/#lab-19-2" class="">Lab 19-2 (Lab19-02.exe)</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter19/#lab-19-3" class="">Lab 19-3 (Lab19-03.exe)</a></li>
          
        </ul>
        
      </li>
    
      <li>
        
          <span class="nav__sub-title">🌊 20. C++ Analysis</span>
        

        
        <ul>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter20/" class="">Start</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter20/#lab-20-1" class="">Lab 20-1 (Lab20-01.exe)</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter20/#lab-20-2" class="">Lab 20-2 (Lab20-02.exe)</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter20/#lab-20-3" class="">Lab 20-3 (Lab20-03.exe)</a></li>
          
        </ul>
        
      </li>
    
      <li>
        
          <span class="nav__sub-title">🌌 21. 64-Bit Malware</span>
        

        
        <ul>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter21/" class="">Start</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter21/#lab-21-1" class="">Lab 21-1 (Lab21-01.exe)</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter21/#lab-21-2" class="">Lab 21-2 (Lab21-02.exe)</a></li>
          
        </ul>
        
      </li>
    
      <li>
        
          <span class="nav__sub-title">🎁 Conclusion</span>
        

        
        <ul>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Conclusion/" class="">Start</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Conclusion/#extra---yara-malware-identification" class="">YARA: Malware Identification</a></li>
          
            
            

            
            

            <li><a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Conclusion/#tutorial-conclusion" class="">Tutorial Conclusion</a></li>
          
        </ul>
        
      </li>
    
  </ul>
</nav>
    
    
  
  </div>


  <article class="page" itemscope="" itemtype="https://schema.org/CreativeWork">
    <meta itemprop="headline" content="Practical Malware Analysis - Chapter 10 Lab Write-up">
    <meta itemprop="description" content="This details reverse engineering activities and answers for labs contained in the book ‘Practical Malware Analysis’ by Michael Sikorski and Andrew Honig, which is published by No Starch Press.">
    <meta itemprop="datePublished" content="June 05, 2021">
    <meta itemprop="dateModified" content="November 13, 2023">

    <div class="page__inner-wrap">
      
        <header>
          <h1 id="page-title" class="page__title" itemprop="headline">Practical Malware Analysis - Chapter 10 Lab Write-up
</h1>
          
            <p class="page__meta"><svg class="svg-inline--fa fa-clock fa-w-16" aria-hidden="true" focusable="false" data-prefix="far" data-icon="clock" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" data-fa-i2svg=""><path fill="currentColor" d="M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm0 448c-110.5 0-200-89.5-200-200S145.5 56 256 56s200 89.5 200 200-89.5 200-200 200zm61.8-104.4l-84.9-61.7c-3.1-2.3-4.9-5.9-4.9-9.7V116c0-6.6 5.4-12 12-12h32c6.6 0 12 5.4 12 12v141.7l66.8 48.6c5.4 3.9 6.5 11.4 2.6 16.8L334.6 349c-3.9 5.3-11.4 6.5-16.8 2.6z"></path></svg><!-- <i class="far fa-clock" aria-hidden="true"></i> --> 




  15 minute read
</p>
          
        </header>
      

      <section class="page__content" itemprop="text">
        
        <p><img src="Practical%20Malware%20Analysis%20-%20Chapter%2010%20Lab%20Write-up%20Jai%20Minton_files/PMALabCHAPTER10.JPG" alt="PMALab" class="align-center"></p>

<h1 id="chapter-10-kernel-debugging-with-windbg">Chapter 10. Kernel Debugging with WinDbg</h1>

<p>Before getting into this chapter, we’ll need to setup a suitable 
environment for debugging Kernel Driver activity. In this instance we’ll
 use the below:</p>

<ul>
  <li>VMware Player or Virtualbox</li>
  <li>Windows XP VM (Guest OS)</li>
  <li>WinDbg Preview (Host OS)</li>
</ul>

<p>First we fire up our VM and modify boot.ini to have another entry 
with a COM serial port enabled (take the last line, change the name and 
add in the below).</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/noexecute=optin /fastdetect /noexecute=optin /fastdetect /debug /debugport=COM1 /baudrate=115200
</code></pre></div></div>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%2010%20Lab%20Write-up%20Jai%20Minton_files/Screenshot01.jpg" alt="Lab10-Setup"></p>

<p>Save the file and shutdown the OS. Next create a COM serial port that
 uses a named pipe which our debugger will communicate with.</p>

<ul>
  <li>Under Virtualbox this should look similar to the below:</li>
</ul>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%2010%20Lab%20Write-up%20Jai%20Minton_files/Screenshot02_004.jpg" alt="Lab10-Setup"></p>

<ul>
  <li>Under Vmware Player you will need to add a Serial Port.</li>
</ul>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%2010%20Lab%20Write-up%20Jai%20Minton_files/Screenshot03_004.jpg" alt="Lab10-Setup"></p>

<ul>
  <li>Before setting this up as a server with the other end specified as an application.</li>
</ul>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%2010%20Lab%20Write-up%20Jai%20Minton_files/Screenshot04_004.jpg" alt="Lab10-Setup"></p>

<p>Once this is done your guest OS is ready to roll, all you need to do 
is open Windbg Preview and start debugging the kernel via the named pipe
 we created.</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%2010%20Lab%20Write-up%20Jai%20Minton_files/Screenshot05_004.jpg" alt="Lab10-Setup"></p>

<p>So long as our VM is booted using the COM serial port option we 
specified, it’ll create the named pipe that our debugger will connect 
to, and we’re good to go.</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%2010%20Lab%20Write-up%20Jai%20Minton_files/Screenshot06_002.jpg" alt="Lab10-Setup"></p>

<h2 id="useful-windbg-commands">Useful Windbg Commands</h2>

<ul>
  <li>da = Reads from memory and displays as ascii</li>
  <li>du = Reads from memory and displays as unicode</li>
  <li>dd = Reads from memory and displays as 32-bit double values</li>
  <li>ex = Writes data to a memory location</li>
  <li>dwo = Dereference a pointer and show the value it points to e.g. ‘du dwo (esp+4)’</li>
  <li>bp = Create breakpoint</li>
  <li>g = (Go) Run an action at a breakpoint</li>
  <li>moduleName!symbolName = Search for symbol</li>
  <li>bu = Create breakpoint based on condition such as module load</li>
  <li>$iment = Determine entry point</li>
  <li>x = Search functions for value</li>
  <li>ln = list nearest function to memory address</li>
  <li>dt = Driver Type information based on symbols</li>
  <li>!drvobj <drivername></drivername></li>
</ul>

<p>Common Examples:</p>

<ul>
  <li>bu newModule!exportedFunction</li>
  <li>bu $iment(driverName)</li>
  <li>x nt!<em>CreateProcess</em></li>
  <li>ln <memorylocation></memorylocation></li>
</ul>

<h2 id="lab-10-1">Lab 10-1</h2>

<p>This lab includes both a driver and an executable. You can run the 
executable from anywhere, but in order for the program to work properly,
 the driver must be placed in the C:\Windows\System32 directory where it
 was originally found on the victim computer. The executable is 
Lab10-01.exe, and the driver is Lab10-01.sys</p>

<h3 id="question-1">Question 1</h3>

<p class="notice--info">Does this program make any direct changes to the registry? (Use procmon to check.)</p>

<h3 id="answer-1">Answer 1</h3>

<p>By running procmon and filtering on reg set events related to the 
executable lab10-01, we can see that only one direct change to the 
registry has been recorded: 
HKLM\SOFTWARE\Microsoft\Cryptography\RNG\Seed.</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%2010%20Lab%20Write-up%20Jai%20Minton_files/Screenshot01_003.jpg" alt="Lab10-1">
<img src="Practical%20Malware%20Analysis%20-%20Chapter%2010%20Lab%20Write-up%20Jai%20Minton_files/Screenshot02_003.jpg" alt="Lab10-1"></p>

<h3 id="question-2">Question 2</h3>

<p class="notice--info">The user-space program calls the ControlService 
function. Can you set a breakpoint with WinDbg to see what is executed 
in the kernel as a result of the call to ControlService?</p>

<h3 id="answer-2">Answer 2</h3>

<p>To do this we will need to setup a breakpoint using WindDbg in our VM
 and be analysing kernel operations using WinDbg on our host. First we 
need to determine where the breakpoint in our VM will be that calls the 
ControlService function. This can be done by examining the memory 
locations this occurs at in IDA.</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%2010%20Lab%20Write-up%20Jai%20Minton_files/Screenshot03_002.jpg" alt="Lab10-1.exe"></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bp 0x00401080
</code></pre></div></div>

<p>Next, while running our VM with debugging enabled and connected to 
our host instance of WinDbg, we open this executable in WinDbg (in our 
VM) and set a breakpoint at this address. This will be used to get a 
baseline of what has occurred prior to the call to ControlService. It’s 
possible you may receive an error message around verifying checksums, 
but attempting to run the breakpoint again ensures it is set.</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%2010%20Lab%20Write-up%20Jai%20Minton_files/Screenshot04_003.jpg" alt="Lab10-1.exe"></p>

<p>By running ‘g’ the application runs and hits our new breakpoint.</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%2010%20Lab%20Write-up%20Jai%20Minton_files/Screenshot05_002.jpg" alt="Lab10-1.exe"></p>

<p>Next in our host, initiate a ‘break’. This will cause the VM to stop 
responding as we’ve now hit a break on the kernel running. Next we run 
‘!drvobj lab10-01’ to locate the driver lab10-01.sys and see if there’s 
any device objects that can be interacted with from user applications.</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%2010%20Lab%20Write-up%20Jai%20Minton_files/Screenshot06.jpg" alt="Lab10-1.sys"></p>

<p>Based on this we know the address it is loaded into (0x86534880), and
 that it contains no user land device objects. From here we can get more
 information about this driver using ‘dt _DRIVER_OBJECT 86534880’</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%2010%20Lab%20Write-up%20Jai%20Minton_files/Screenshot07.jpg" alt="Lab10-1.sys"></p>

<p>Because we want to know what has changhed before the kernel driver is
 unloaded, we can now set a breakpoint at this location ‘bp 0xf7ed8486’ 
and resume the kernel with ‘go’. At this point the OS is usable again. 
By clicking ‘go’ or running ‘g’ on the debugged application in our VM 
once again, the OS freezes and we’re notified that the kernel breakpoint
 has now been hit.</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%2010%20Lab%20Write-up%20Jai%20Minton_files/Screenshot08_003.jpg" alt="Lab10-1.sys"></p>

<p>By stepping through operations, we can see that this then executes some commands to create a registry key.</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%2010%20Lab%20Write-up%20Jai%20Minton_files/Screenshot09_002.jpg" alt="Lab10-1.sys"></p>

<p>At this point it’s worth analysing the driver using IDA to gather 
more information on what has occurred. By looking at this location 
within IDA, we can easily see that it is creating 5 different registry 
keys which goes completely undetected by Procmon.</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%2010%20Lab%20Write-up%20Jai%20Minton_files/Screenshot10_003.jpg" alt="Lab10-1.sys"></p>

<p>Looking closer at these values we can see that it is setting keys to disable the Windows Firewall by changing these values to 0.</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%2010%20Lab%20Write-up%20Jai%20Minton_files/Screenshot11.jpg" alt="Lab10-1.sys"></p>

<h3 id="question-3">Question 3</h3>

<p class="notice--info">What does this program do?</p>

<h3 id="answer-3">Answer 3</h3>

<p>By taking a look at what we know, we can examine the binary in 
question within IDA and see it creates a kernel service which is then 
used to stealthily update the registry to disable the Windows Firewall 
before being unloaded.</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%2010%20Lab%20Write-up%20Jai%20Minton_files/Screenshot12_003.jpg" alt="Lab10-1.sys"></p>

<h2 id="lab-10-2">Lab 10-2</h2>

<p>The file for this lab is Lab10-02.exe.</p>

<h3 id="question-1-1">Question 1</h3>

<p class="notice--info">Does this program create any files? If so, what are they?</p>

<h3 id="answer-1-1">Answer 1</h3>

<p>By running this program and examining it with Procmon we can see that it creates a kernel driver and writes it to disk.</p>

<ul>
  <li>C:\Windows\System32\Mlwx486.sys</li>
</ul>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%2010%20Lab%20Write-up%20Jai%20Minton_files/Screenshot01_002.jpg" alt="Lab10-2.exe"></p>

<p>Attempting to view the file on disk causes it to not be shown; 
however, using process hacker we’re able to find this file loaded into 
the kernel and gather from its description that it’s likely an Input and
 Output Control driver, so we may be looking at a rootkit here.</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%2010%20Lab%20Write-up%20Jai%20Minton_files/Screenshot02.jpg" alt="Lab10-2.exe"></p>

<p>This same information could have been found by using our previously setup kernel debugger.</p>

<p>By examining the imported functions of this binary using peview, we 
can see that it is likely going to examine the contents of its resource 
section and write a file to disk. This helps to confirm what we saw with
 Procmon.</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%2010%20Lab%20Write-up%20Jai%20Minton_files/Screenshot03_003.jpg" alt="Lab10-2.exe"></p>

<h3 id="question-2-1">Question 2</h3>

<p class="notice--info">Does this program have a kernel component?</p>

<h3 id="answer-2-1">Answer 2</h3>

<p>By examining the resource section of lab10-02.exe using resource 
hacker we’re able to see it is indeed hiding an executable of some kind,
 and in this instance the Program Database (pdb) we can see (which holds
 debugging references), leads us once again to thinking this contains a 
kernel component/rootkit.</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%2010%20Lab%20Write-up%20Jai%20Minton_files/Screenshot04.jpg" alt="Lab10-2.exe"></p>

<p>With resource hacker we can save this directly to a .sys file and 
have the filtering kernel component extracted with the following SHA256 
hash.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>42B66F4DCB1380AB6330CFB638CE97C7BEA6D772EDDD1D34C1031B0D16DEA19C
</code></pre></div></div>

<p>This has the same file information as the kernel driver currently loaded from: C:\Windows\System32\Mlwx486.sys.</p>

<p>Examining the binary through IDA (The driver we extracted with 
resource hacker) reveals that it is indeed creating the file and 
creating a service for it called ‘486 WS Driver’ before starting it.</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%2010%20Lab%20Write-up%20Jai%20Minton_files/Screenshot05_003.jpg" alt="Lab10-2.exe"></p>

<p>We can see this through the use of the Service Control (SC) binary.</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%2010%20Lab%20Write-up%20Jai%20Minton_files/Screenshot06_003.jpg" alt="Lab10-2.exe"></p>

<h3 id="question-3-1">Question 3</h3>

<p class="notice--info">What does this program do?</p>

<h3 id="answer-3-1">Answer 3</h3>

<p>Currently we know that this creates a service with an unknown driver 
that can’t be seen on disk and looks like a rootkit. To get some more 
information we can debug the driver in memory. Upon restarting the host 
it’s likely that the driver won’t have started and will need to be 
started with the Service Control binary.</p>

<ul>
  <li>sc start “486 WS Driver”</li>
</ul>

<p>From here we can break into our debugger and see whether this is loaded by using ‘lm’ and clicking on our identified driver.</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%2010%20Lab%20Write-up%20Jai%20Minton_files/Screenshot07_003.jpg" alt="Lab10-2.exe"></p>

<p>This gives us enough information to begin probing the System Service 
Descriptor Table (SSDT), or in layman terms, a table of pointers to 
addresses in memory where kernel functions are located. This is 
identified by ntoskrnl.exe (NT OS Kernel, this dates back to Windows NT 
days) as ‘KiServiceTable’.</p>

<p>Given we are looking for pointers and know that Debugging Symbols 
makes our life easier, we can use the ‘dps’ command to dump pointer 
symbols of the KiServiceTable, list out 100 entries and view what has 
been loaded into the kernel. We would expect all the memory addresses to
 point to a similar location in memory and be from the same module e.g. 
ntoskrnl.exe (NT); however, when we analyse this we can see an anomaly.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dps KiServiceTable L100
</code></pre></div></div>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%2010%20Lab%20Write-up%20Jai%20Minton_files/Screenshot08_002.jpg" alt="Lab10-2.exe"></p>

<p>Based on this output we can see that the driver (module) has hooked 
an entry in KiServiceTable and pointed it to our identified malicious 
driver. Note: In later 64-bit versions of Windows this technique would 
cause a blue screen due to a security feature known as ‘patch guard’.</p>

<p>To determine what it has hooked, we can locate what was at this 
address prior to infection, or we can examine this more thoroughly using
 IDA. When looking at this through IDA we can see it seems to be hooking
 NtQueryDirectoryFile.</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%2010%20Lab%20Write-up%20Jai%20Minton_files/Screenshot09.jpg" alt="Lab10-2.exe"></p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%2010%20Lab%20Write-up%20Jai%20Minton_files/Screenshot10_002.jpg" alt="Lab10-2.exe"></p>

<p>By jumping to the file offset we identified through debugging 
‘0x486’, we see some information that looks like it’s part of a 
function.</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%2010%20Lab%20Write-up%20Jai%20Minton_files/Screenshot11_002.jpg" alt="Lab10-2.exe"></p>

<p>By right clicking the location and selecting ‘create function’ we can get a clearer picture of what is occurring.</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%2010%20Lab%20Write-up%20Jai%20Minton_files/Screenshot12.jpg" alt="Lab10-2.exe"></p>

<p>Of most interest is that after the driver calls the legitimate 
NtQueryDirectoryFile function, it then adds an entry to compare a value 
to a block of memory. If we convert this to ascii and view the entry for
 word_1051A, we can see it is comparing to the value ‘Mlwx’.</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%2010%20Lab%20Write-up%20Jai%20Minton_files/Screenshot13_002.jpg" alt="Lab10-2.exe"></p>

<p>This makes it far more clear that the hook functions like normal; 
however, if a file exists with a name starting with ‘Mlwx’, it won’t be 
shown (as a jump occurs). We can test this by creating a folder or file 
beginning with this and watching it vanish before our very eyes.</p>

<p>At this point we have a clear understanding that this is designed to 
install a kernel rootkit that uses SSDT hooking to hide any files or 
folders beginning with (case-sensitive) ‘Mlwx’.</p>

<h2 id="lab-10-3">Lab 10-3</h2>

<p>This lab includes a driver and an executable. You can run the 
executable from anywhere, but in order for the program to work properly,
 the driver must be placed in the C:\Windows\System32 directory where it
 was originally found on the victim computer. The executable is 
Lab10-03.exe, and the driver is Lab10-03.sys.</p>

<h3 id="question-1-2">Question 1</h3>

<p class="notice--info">What does this program do?</p>

<h3 id="answer-1-2">Answer 1</h3>

<p>By running the program in a sandbox we can see that after a brief 
period of time it opens a web browser to an advertisement located at: 
http://malwareanalysisbook.com/ad.html. This continues to open a new web
 browser pointing at this webpage at regular intervals.</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%2010%20Lab%20Write-up%20Jai%20Minton_files/Screenshot01_004.jpg" alt="Lab10-3.exe"></p>

<p>By analysing the accompanying windows driver with peview 
(Lab10-03.sys) we can see that it has a number of imports including 
‘IoGetCurrentProcess’.</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%2010%20Lab%20Write-up%20Jai%20Minton_files/Screenshot02_002.jpg" alt="Lab10-3.sys"></p>

<p>The other imports are common among drivers; however, this particular 
import gives us the impression that the driver will be getting a pointer
 to the current process it is running from, and in essence will be 
either getting information about it or modifying it.</p>

<p>To get more information on what is occurring we can look at the 
executable Lab10-03.exe through IDA. At a glance we can see that this is
 creating a service called “Process Helper” which points to the 
aforementioned driver, before starting it and getting a handle to 
\.\ProcHelper through CreateFileA.</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%2010%20Lab%20Write-up%20Jai%20Minton_files/Screenshot03.jpg" alt="Lab10-3.exe"></p>

<p>Based on this we can make an informed decision that a device will be 
created by the kernel driver at \.\ProcHelper which will allow 
communication between the user component Lab10-03.exe, and the kernel 
driver component ‘Lab10-03.sys’.</p>

<p>To understand what is being sent to the kernel driver prior to 
digging into that further we can take a look at what is being passed to 
“DeviceIoControl’. We can also see some calls to OleInitialise and 
CoCreateInstance which lead us into believing that a COM object will be 
created and used by this executable which in this instance we can see is
 what’s being used to open IE in a loop to show the advertisement 
webpage.</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%2010%20Lab%20Write-up%20Jai%20Minton_files/Screenshot04_002.jpg" alt="Lab10-3.exe"></p>

<p>Of interest is that null (0) values are being sent through 
lpOutBuffer and lpInBuffer which indicates no input or output values are
 expected, and that only ‘0ABCDEF01h’ needs to be sent as the control 
code to the kernel driver which we will dive into further in the 
following questions. More information on this operation can be found 
under the <a href="https://docs.microsoft.com/en-us/windows/win32/api/ioapiset/nf-ioapiset-deviceiocontrol">DeviceIoControl function</a>.</p>

<h3 id="question-2-2">Question 2</h3>

<p class="notice--info">Once this program is running, how do you stop it?</p>

<h3 id="answer-2-2">Answer 2</h3>

<p>By opening Process Explorer or Task Manager prior to running 
lab10-03.exe, we can see that there is an instance of internet explorer 
running which is spawning advertisements through the initialised COM 
object; however, there’s no mention of lab10-03.exe</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%2010%20Lab%20Write-up%20Jai%20Minton_files/Screenshot05.jpg" alt="Lab10-3.exe"></p>

<p>If we kill internet explorer the advertisement popups will stop. This
 is because the looping component that appears to be spawning these 
windows comes from the iexplore instantiated COM object rather than 
lab10-03.exe itself and there’s no redundancy to reinstantiate the COM 
object.</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%2010%20Lab%20Write-up%20Jai%20Minton_files/Screenshot06_004.jpg" alt="Lab10-3.exe"></p>

<p>Having said this we still see no evidence of lab10-03.exe which may 
be still running. To understand why we begin to dig further into the 
kernel driver.</p>

<h3 id="question-3-2">Question 3</h3>

<p class="notice--info">What does the kernel component do?</p>

<h3 id="answer-3-2">Answer 3</h3>

<p>Opening up lab10-03.sys in IDA we can see that it does create a 
device, and a symbolic link. In this instance the symbolic link 
DosDevices\ProcHelper redirects to \Device\ProcHelper which allows the 
user application to communicate with the kernel driver.</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%2010%20Lab%20Write-up%20Jai%20Minton_files/Screenshot07_002.jpg" alt="Lab10-3.exe"></p>

<p>From here if we move back to debugging the kernel driver, we can 
search directly for the device object ‘ProcHelper’ so long as the 
service “process helper” is running, and then use the address of the 
driver object to gather more information about the object.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>!devobj ProcHelper
dt nt!_DRIVER_OBJECT 86576500
</code></pre></div></div>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%2010%20Lab%20Write-up%20Jai%20Minton_files/Screenshot08.jpg" alt="Lab10-3.exe"></p>

<p>Of most relevance to us is the DriverInit and Major function address 
locations. To get more information about major functions this implements
 we can use ‘dd’ and specify the address + the offset identified.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dd 86576500+0x38
</code></pre></div></div>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%2010%20Lab%20Write-up%20Jai%20Minton_files/Screenshot09_003.jpg" alt="Lab10-3.exe"></p>

<p>Looking at the above we can see that there’s 3 unique functions 
implemented, and what looks to be noise data that doesn’t fit right at 
the bottom (this is because we’ve retrieved more than the max amount of 
major functions shown when we identified this offset).</p>

<p>To fix this we can specify the max amount of results to retrieve in 
hex ‘L1C’ (1C is hex for 28 in decimal which we saw previously), the new
 command would be as follows:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dd 86576500+0x38 L1C
</code></pre></div></div>

<p>Moving back to our results we can see the following valid Major functions implemented:</p>

<ul>
  <li>f7f30606</li>
  <li>804fa87e</li>
  <li>f7f30666</li>
</ul>

<p>To get an idea of what these are you can use the ‘ln’ command if you 
have debugging symbols installed to get the names nearest to these 
locations:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ln f7f30606
ln 804fa87e
ln f7f30666
</code></pre></div></div>

<p>If this doesn’t return results we can also go browsing with ‘dps’ similar to our previous query with ‘dd’.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dps 86576500+0x38 L1C
</code></pre></div></div>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%2010%20Lab%20Write-up%20Jai%20Minton_files/Screenshot10.jpg" alt="Lab10-3.exe"></p>

<p>From here we can see that the most common major function implemented 
is ‘nt!IopInvalidDeviceRequest’ which is basically a catch all for any 
function that this driver doesn’t implement. The others now specify 
their offset of ‘Lab10_03+0x606’ and ‘Lab10_03+0x666’.</p>

<p>Moving back to IDA, if we decompile this and from the start function 
jump to these offsets, we can find out what these functions are 
performing.</p>

<ul>
  <li>Lab10_03+0x606</li>
</ul>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%2010%20Lab%20Write-up%20Jai%20Minton_files/Screenshot11_003.jpg" alt="Lab10-3.exe"></p>

<ul>
  <li>Lab10_03+0x666</li>
</ul>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%2010%20Lab%20Write-up%20Jai%20Minton_files/Screenshot12_002.jpg" alt="Lab10-3.exe"></p>

<p>From the above we can see that offset 0x606 doesn’t do much besides 
call a function to indicate that processing of this I/O request is 
complete. The offset 0x666 on the other hand is calling 
IoGetCurrentProcess which we identified earlier, before accessing data 
at 0x88, and 0x8C (0x88 + 4).</p>

<p>If we look at what is returned from a call to IoGetCurrentProcess we find out that it is a pointer to the current process, ref:<a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/wdm/nf-wdm-iogetcurrentprocess">IoGetCurrentProcess function</a>.
 To understand how this looks from a kernel point of view, we need to 
understand that the opaque structure for a process object is ‘EPROCESS’,
 ref:<a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/kernel/eprocess">Windows kernel opaque structures</a>.</p>

<p>Knowing that an EPROCESS structure will be returned for the process 
that made the call to this function, we can move back to our debugger 
and find out what resides at 0x88 and 0x8C of this structure.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dt nt!_EPROCESS
</code></pre></div></div>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%2010%20Lab%20Write-up%20Jai%20Minton_files/Screenshot13.jpg" alt="Lab10-3.exe"></p>

<p>As nothing falls at 0x8C, but this falls before 0x90, we can conclude
 that both relate to a LIST_ENTRY structure of ActiveProcessLinks. Once 
again we now need to look into what constitutes a LIST_ENTRY structure, 
Ref:<a href="https://docs.microsoft.com/en-us/windows/win32/api/ntdef/ns-ntdef-list_entry">LIST_ENTRY structure</a></p>

<p>From the above documentation we can see that there’s 2 main members we need to be aware of:</p>

<ul>
  <li>Flink</li>
  <li>Blink</li>
</ul>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%2010%20Lab%20Write-up%20Jai%20Minton_files/Screenshot14.jpg" alt="Lab10-3.exe"></p>

<p>Revisiting the function at Lab10_03+0x666 with this knowledge we can begin to piece together what this does.</p>

<p><img src="Practical%20Malware%20Analysis%20-%20Chapter%2010%20Lab%20Write-up%20Jai%20Minton_files/Screenshot15.jpg" alt="Lab10-3.sys"></p>

<p>We know that adding 4 now is to move to the next EPROCESS structure 
based on the number of members in the LIST_ENTRY structure. The main 
function of this driver now begins to look like the below.</p>

<p>mov     ecx, [eax+8Ch] - Get the next EPROCESS object from its relevant LIST_ENTRY retrieved from ActiveProcessLinks.</p>

<p>add     eax, 88h - Access data at offset 0x88 (LIST_ENTRY structure).</p>

<p>mov     edx, [eax] - Point to an entry at an offset of 0x88 (previous entry in list).</p>

<p>mov     [ecx], edx - Overwrite Blink to point to the previous entry in the list (This effectively skips the calling process).</p>

<p>mov     ecx, [eax] - Point to an entry at an offset of 0x88 (previous entry in list).</p>

<p>mov     eax, [eax+4] - Overwrite Flink to point to the previous entry in list (This effectively skips the calling process).</p>

<p>mov     [ecx+4], eax - Point to next entry.</p>

<p>Put more simply the kernel component performs the following after a 
call is made by a process to ‘Lab10_03+0x666’ (f7f30666 - 
DeviceIoControl).</p>

<ul>
  <li>The next Active Process from a list containing EPROCESS structures is retrieved.</li>
  <li>This is modified to set the previous linked process to skip over the process that made this call when looking forward.</li>
  <li>This is modified to set the next linked process to skip over the process that made this call when looking backward.</li>
  <li>The end result is that the calling process is unlinked and becomes invisible when viewed by a user.</li>
</ul>

<p>This concludes chapter 10, <a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter11/">proceed to the next chapter</a>.</p>

        
      </section>

      <footer class="page__meta">
        
        
  


  
  
  

  <p class="page__taxonomy">
    <strong><svg class="svg-inline--fa fa-tags fa-w-20 fa-fw" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="tags" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 640 512" data-fa-i2svg=""><path fill="currentColor" d="M497.941 225.941L286.059 14.059A48 48 0 0 0 252.118 0H48C21.49 0 0 21.49 0 48v204.118a48 48 0 0 0 14.059 33.941l211.882 211.882c18.744 18.745 49.136 18.746 67.882 0l204.118-204.118c18.745-18.745 18.745-49.137 0-67.882zM112 160c-26.51 0-48-21.49-48-48s21.49-48 48-48 48 21.49 48 48-21.49 48-48 48zm513.941 133.823L421.823 497.941c-18.745 18.745-49.137 18.745-67.882 0l-.36-.36L527.64 323.522c16.999-16.999 26.36-39.6 26.36-63.64s-9.362-46.641-26.36-63.64L331.397 0h48.721a48 48 0 0 1 33.941 14.059l211.882 211.882c18.745 18.745 18.745 49.137 0 67.882z"></path></svg><!-- <i class="fas fa-fw fa-tags" aria-hidden="true"></i> --> Tags: </strong>
    <span itemprop="keywords">
    
      
      
      <a href="https://www.jaiminton.com/tags/#breakpoints" class="page__taxonomy-item" rel="tag">Breakpoints</a><span class="sep">, </span>
    
      
      
      <a href="https://www.jaiminton.com/tags/#com-object" class="page__taxonomy-item" rel="tag">COM Object</a><span class="sep">, </span>
    
      
      
      <a href="https://www.jaiminton.com/tags/#com-serial-port" class="page__taxonomy-item" rel="tag">COM serial port</a><span class="sep">, </span>
    
      
      
      <a href="https://www.jaiminton.com/tags/#debugging" class="page__taxonomy-item" rel="tag">Debugging</a><span class="sep">, </span>
    
      
      
      <a href="https://www.jaiminton.com/tags/#deviceiocontrol" class="page__taxonomy-item" rel="tag">DeviceIoControl</a><span class="sep">, </span>
    
      
      
      <a href="https://www.jaiminton.com/tags/#dynamic-malware-analysis" class="page__taxonomy-item" rel="tag">Dynamic Malware Analysis</a><span class="sep">, </span>
    
      
      
      <a href="https://www.jaiminton.com/tags/#eprocess" class="page__taxonomy-item" rel="tag">EPROCESS</a><span class="sep">, </span>
    
      
      
      <a href="https://www.jaiminton.com/tags/#ida-pro" class="page__taxonomy-item" rel="tag">IDA Pro</a><span class="sep">, </span>
    
      
      
      <a href="https://www.jaiminton.com/tags/#ioctl-driver" class="page__taxonomy-item" rel="tag">IOCTL Driver</a><span class="sep">, </span>
    
      
      
      <a href="https://www.jaiminton.com/tags/#kernel-debugging" class="page__taxonomy-item" rel="tag">Kernel Debugging</a><span class="sep">, </span>
    
      
      
      <a href="https://www.jaiminton.com/tags/#kiservicetable" class="page__taxonomy-item" rel="tag">KiServiceTable</a><span class="sep">, </span>
    
      
      
      <a href="https://www.jaiminton.com/tags/#malware-analysis" class="page__taxonomy-item" rel="tag">Malware Analysis</a><span class="sep">, </span>
    
      
      
      <a href="https://www.jaiminton.com/tags/#named-pipe" class="page__taxonomy-item" rel="tag">Named Pipe</a><span class="sep">, </span>
    
      
      
      <a href="https://www.jaiminton.com/tags/#no-starch-press" class="page__taxonomy-item" rel="tag">No Starch Press</a><span class="sep">, </span>
    
      
      
      <a href="https://www.jaiminton.com/tags/#peview" class="page__taxonomy-item" rel="tag">PEview</a><span class="sep">, </span>
    
      
      
      <a href="https://www.jaiminton.com/tags/#pma" class="page__taxonomy-item" rel="tag">PMA</a><span class="sep">, </span>
    
      
      
      <a href="https://www.jaiminton.com/tags/#process-hacker" class="page__taxonomy-item" rel="tag">Process Hacker</a><span class="sep">, </span>
    
      
      
      <a href="https://www.jaiminton.com/tags/#process-monitor-procmon" class="page__taxonomy-item" rel="tag">Process Monitor (Procmon)</a><span class="sep">, </span>
    
      
      
      <a href="https://www.jaiminton.com/tags/#resource-hacker" class="page__taxonomy-item" rel="tag">Resource Hacker</a><span class="sep">, </span>
    
      
      
      <a href="https://www.jaiminton.com/tags/#rootkit" class="page__taxonomy-item" rel="tag">Rootkit</a><span class="sep">, </span>
    
      
      
      <a href="https://www.jaiminton.com/tags/#static-malware-analysis" class="page__taxonomy-item" rel="tag">Static Malware Analysis</a><span class="sep">, </span>
    
      
      
      <a href="https://www.jaiminton.com/tags/#symbolic-link" class="page__taxonomy-item" rel="tag">Symbolic Link</a><span class="sep">, </span>
    
      
      
      <a href="https://www.jaiminton.com/tags/#system-service-descriptor-table-ssdt" class="page__taxonomy-item" rel="tag">System Service Descriptor Table (SSDT)</a><span class="sep">, </span>
    
      
      
      <a href="https://www.jaiminton.com/tags/#windbg" class="page__taxonomy-item" rel="tag">WinDbg</a><span class="sep">, </span>
    
      
      
      <a href="https://www.jaiminton.com/tags/#windows-firewall" class="page__taxonomy-item" rel="tag">Windows Firewall</a><span class="sep">, </span>
    
      
      
      <a href="https://www.jaiminton.com/tags/#x86-disassembly" class="page__taxonomy-item" rel="tag">x86 Disassembly</a>
    
    </span>
  </p>




  


  
  
  

  <p class="page__taxonomy">
    <strong><svg class="svg-inline--fa fa-folder-open fa-w-18 fa-fw" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="folder-open" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 576 512" data-fa-i2svg=""><path fill="currentColor" d="M572.694 292.093L500.27 416.248A63.997 63.997 0 0 1 444.989 448H45.025c-18.523 0-30.064-20.093-20.731-36.093l72.424-124.155A64 64 0 0 1 152 256h399.964c18.523 0 30.064 20.093 20.73 36.093zM152 224h328v-48c0-26.51-21.49-48-48-48H272l-64-64H48C21.49 64 0 85.49 0 112v278.046l69.077-118.418C86.214 242.25 117.989 224 152 224z"></path></svg><!-- <i class="fas fa-fw fa-folder-open" aria-hidden="true"></i> --> Categories: </strong>
    <span itemprop="keywords">
    
      
      
      <a href="https://www.jaiminton.com/categories/#practicalmalwareanalysis" class="page__taxonomy-item" rel="tag">PracticalMalwareAnalysis</a><span class="sep">, </span>
    
      
      
      <a href="https://www.jaiminton.com/categories/#reverse-engineering" class="page__taxonomy-item" rel="tag">Reverse Engineering</a><span class="sep">, </span>
    
      
      
      <a href="https://www.jaiminton.com/categories/#tutorials" class="page__taxonomy-item" rel="tag">Tutorials</a><span class="sep">, </span>
    
      
      
      <a href="https://www.jaiminton.com/categories/#windows" class="page__taxonomy-item" rel="tag">Windows</a>
    
    </span>
  </p>


        
          <p class="page__date"><strong><svg class="svg-inline--fa fa-calendar-alt fa-w-14 fa-fw" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="calendar-alt" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512" data-fa-i2svg=""><path fill="currentColor" d="M0 464c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V192H0v272zm320-196c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12h-40c-6.6 0-12-5.4-12-12v-40zm0 128c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12h-40c-6.6 0-12-5.4-12-12v-40zM192 268c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12h-40c-6.6 0-12-5.4-12-12v-40zm0 128c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12h-40c-6.6 0-12-5.4-12-12v-40zM64 268c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12H76c-6.6 0-12-5.4-12-12v-40zm0 128c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12H76c-6.6 0-12-5.4-12-12v-40zM400 64h-48V16c0-8.8-7.2-16-16-16h-32c-8.8 0-16 7.2-16 16v48H160V16c0-8.8-7.2-16-16-16h-32c-8.8 0-16 7.2-16 16v48H48C21.5 64 0 85.5 0 112v48h448v-48c0-26.5-21.5-48-48-48z"></path></svg><!-- <i class="fas fa-fw fa-calendar-alt" aria-hidden="true"></i> --> Updated:</strong> <time datetime="2023-11-13">November 13, 2023</time></p>
        
      </footer>

      <section class="page__share">
  
    <h4 class="page__share-title">Share on</h4>
  

  <a href="https://twitter.com/intent/tweet?via=CyberRaiju&amp;text=Practical+Malware+Analysis+-+Chapter+10+Lab+Write-up%20https%3A%2F%2Fwww.jaiminton.com%2FTutorials%2FPracticalMalwareAnalysis%2FChapter10%2F" class="btn btn--twitter" onclick="window.open(this.href, 'window', 'left=20,top=20,width=500,height=500,toolbar=1,resizable=0'); return false;" title="Share on Twitter"><svg class="svg-inline--fa fa-twitter fa-w-16 fa-fw" aria-hidden="true" focusable="false" data-prefix="fab" data-icon="twitter" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" data-fa-i2svg=""><path fill="currentColor" d="M459.37 151.716c.325 4.548.325 9.097.325 13.645 0 138.72-105.583 298.558-298.558 298.558-59.452 0-114.68-17.219-161.137-47.106 8.447.974 16.568 1.299 25.34 1.299 49.055 0 94.213-16.568 130.274-44.832-46.132-.975-84.792-31.188-98.112-72.772 6.498.974 12.995 1.624 19.818 1.624 9.421 0 18.843-1.3 27.614-3.573-48.081-9.747-84.143-51.98-84.143-102.985v-1.299c13.969 7.797 30.214 12.67 47.431 13.319-28.264-18.843-46.781-51.005-46.781-87.391 0-19.492 5.197-37.36 14.294-52.954 51.655 63.675 129.3 105.258 216.365 109.807-1.624-7.797-2.599-15.918-2.599-24.04 0-57.828 46.782-104.934 104.934-104.934 30.213 0 57.502 12.67 76.67 33.137 23.715-4.548 46.456-13.32 66.599-25.34-7.798 24.366-24.366 44.833-46.132 57.827 21.117-2.273 41.584-8.122 60.426-16.243-14.292 20.791-32.161 39.308-52.628 54.253z"></path></svg><!-- <i class="fab fa-fw fa-twitter" aria-hidden="true"></i> --><span> Twitter</span></a>

  <a href="https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fwww.jaiminton.com%2FTutorials%2FPracticalMalwareAnalysis%2FChapter10%2F" class="btn btn--facebook" onclick="window.open(this.href, 'window', 'left=20,top=20,width=500,height=500,toolbar=1,resizable=0'); return false;" title="Share on Facebook"><svg class="svg-inline--fa fa-facebook fa-w-14 fa-fw" aria-hidden="true" focusable="false" data-prefix="fab" data-icon="facebook" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512" data-fa-i2svg=""><path fill="currentColor" d="M448 56.7v398.5c0 13.7-11.1 24.7-24.7 24.7H309.1V306.5h58.2l8.7-67.6h-67v-43.2c0-19.6 5.4-32.9 33.5-32.9h35.8v-60.5c-6.2-.8-27.4-2.7-52.2-2.7-51.6 0-87 31.5-87 89.4v49.9h-58.4v67.6h58.4V480H24.7C11.1 480 0 468.9 0 455.3V56.7C0 43.1 11.1 32 24.7 32h398.5c13.7 0 24.8 11.1 24.8 24.7z"></path></svg><!-- <i class="fab fa-fw fa-facebook" aria-hidden="true"></i> --><span> Facebook</span></a>

  <a href="https://www.linkedin.com/shareArticle?mini=true&amp;url=https%3A%2F%2Fwww.jaiminton.com%2FTutorials%2FPracticalMalwareAnalysis%2FChapter10%2F" class="btn btn--linkedin" onclick="window.open(this.href, 'window', 'left=20,top=20,width=500,height=500,toolbar=1,resizable=0'); return false;" title="Share on LinkedIn"><svg class="svg-inline--fa fa-linkedin fa-w-14 fa-fw" aria-hidden="true" focusable="false" data-prefix="fab" data-icon="linkedin" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512" data-fa-i2svg=""><path fill="currentColor" d="M416 32H31.9C14.3 32 0 46.5 0 64.3v383.4C0 465.5 14.3 480 31.9 480H416c17.6 0 32-14.5 32-32.3V64.3c0-17.8-14.4-32.3-32-32.3zM135.4 416H69V202.2h66.5V416zm-33.2-243c-21.3 0-38.5-17.3-38.5-38.5S80.9 96 102.2 96c21.2 0 38.5 17.3 38.5 38.5 0 21.3-17.2 38.5-38.5 38.5zm282.1 243h-66.4V312c0-24.8-.5-56.7-34.5-56.7-34.6 0-39.9 27-39.9 54.9V416h-66.4V202.2h63.7v29.2h.9c8.9-16.8 30.6-34.5 62.9-34.5 67.2 0 79.7 44.3 79.7 101.9V416z"></path></svg><!-- <i class="fab fa-fw fa-linkedin" aria-hidden="true"></i> --><span> LinkedIn</span></a>
</section>


      
  <nav class="pagination">
    
      <a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter1/" class="pagination--pager" title="Practical Malware Analysis - Chapter 1 Lab Write-up
">Previous</a>
    
    
      <a href="https://www.jaiminton.com/Tutorials/PracticalMalwareAnalysis/Chapter11/" class="pagination--pager" title="Practical Malware Analysis - Chapter 11 Lab Write-up
">Next</a>
    
  </nav>

    </div>

    
  </article>

  
  
    <div class="page__related">
      <h4 class="page__related-title">You may also enjoy</h4>
      <div class="grid__wrapper">
        
          



<div class="grid__item">
  <article class="archive__item" itemscope="" itemtype="https://schema.org/CreativeWork">
    
      <div class="archive__item-teaser">
        <img src="Practical%20Malware%20Analysis%20-%20Chapter%2010%20Lab%20Write-up%20Jai%20Minton_files/amos-stealer.jpg" alt="">
      </div>
    
    <h2 class="archive__item-title" itemprop="headline">
      
        <a href="https://www.jaiminton.com/reverse-engineering/atomic-macos-stealer-amos" rel="permalink">Atomic MacOS Stealer (AMOS) - Malware Analysis Lab
</a>
      
    </h2>
    
      <p class="page__meta"><svg class="svg-inline--fa fa-clock fa-w-16" aria-hidden="true" focusable="false" data-prefix="far" data-icon="clock" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" data-fa-i2svg=""><path fill="currentColor" d="M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm0 448c-110.5 0-200-89.5-200-200S145.5 56 256 56s200 89.5 200 200-89.5 200-200 200zm61.8-104.4l-84.9-61.7c-3.1-2.3-4.9-5.9-4.9-9.7V116c0-6.6 5.4-12 12-12h32c6.6 0 12 5.4 12 12v141.7l66.8 48.6c5.4 3.9 6.5 11.4 2.6 16.8L334.6 349c-3.9 5.3-11.4 6.5-16.8 2.6z"></path></svg><!-- <i class="far fa-clock" aria-hidden="true"></i> --> 




  23 minute read
</p>
    
    <p class="archive__item-excerpt" itemprop="description">Analysis of Atomic MacOS Stealer (AMOS) distributed through fake Homebrew domains
</p>
  </article>
</div>

        
          



<div class="grid__item">
  <article class="archive__item" itemscope="" itemtype="https://schema.org/CreativeWork">
    
      <div class="archive__item-teaser">
        <img src="Practical%20Malware%20Analysis%20-%20Chapter%2010%20Lab%20Write-up%20Jai%20Minton_files/wasabiwallet.jpg" alt="">
      </div>
    
    <h2 class="archive__item-title" itemprop="headline">
      
        <a href="https://www.jaiminton.com/reverse-engineering/wasabi-cryptoshuffler-turs" rel="permalink">Cryptoshuffler/TURS Agent - Malware Analysis Lab
</a>
      
    </h2>
    
      <p class="page__meta"><svg class="svg-inline--fa fa-clock fa-w-16" aria-hidden="true" focusable="false" data-prefix="far" data-icon="clock" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" data-fa-i2svg=""><path fill="currentColor" d="M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm0 448c-110.5 0-200-89.5-200-200S145.5 56 256 56s200 89.5 200 200-89.5 200-200 200zm61.8-104.4l-84.9-61.7c-3.1-2.3-4.9-5.9-4.9-9.7V116c0-6.6 5.4-12 12-12h32c6.6 0 12 5.4 12 12v141.7l66.8 48.6c5.4 3.9 6.5 11.4 2.6 16.8L334.6 349c-3.9 5.3-11.4 6.5-16.8 2.6z"></path></svg><!-- <i class="far fa-clock" aria-hidden="true"></i> --> 




  19 minute read
</p>
    
    <p class="archive__item-excerpt" itemprop="description">Analysis of a backoored Wasabi Wallet installer and how it deploys TURS Agent onto a system
</p>
  </article>
</div>

        
          



<div class="grid__item">
  <article class="archive__item" itemscope="" itemtype="https://schema.org/CreativeWork">
    
      <div class="archive__item-teaser">
        <img src="Practical%20Malware%20Analysis%20-%20Chapter%2010%20Lab%20Write-up%20Jai%20Minton_files/asyncrat.jpg" alt="">
      </div>
    
    <h2 class="archive__item-title" itemprop="headline">
      
        <a href="https://www.jaiminton.com/reverse-engineering/asyncrat" rel="permalink">AsyncRAT Injector - Malware Analysis Lab
</a>
      
    </h2>
    
      <p class="page__meta"><svg class="svg-inline--fa fa-clock fa-w-16" aria-hidden="true" focusable="false" data-prefix="far" data-icon="clock" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" data-fa-i2svg=""><path fill="currentColor" d="M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm0 448c-110.5 0-200-89.5-200-200S145.5 56 256 56s200 89.5 200 200-89.5 200-200 200zm61.8-104.4l-84.9-61.7c-3.1-2.3-4.9-5.9-4.9-9.7V116c0-6.6 5.4-12 12-12h32c6.6 0 12 5.4 12 12v141.7l66.8 48.6c5.4 3.9 6.5 11.4 2.6 16.8L334.6 349c-3.9 5.3-11.4 6.5-16.8 2.6z"></path></svg><!-- <i class="far fa-clock" aria-hidden="true"></i> --> 




  27 minute read
</p>
    
    <p class="archive__item-excerpt" itemprop="description">Analysis of an AsyncRAT downloader, reflective loader, injector, and perfoming AES decryption using CyberChef
</p>
  </article>
</div>

        
          



<div class="grid__item">
  <article class="archive__item" itemscope="" itemtype="https://schema.org/CreativeWork">
    
      <div class="archive__item-teaser">
        <img src="Practical%20Malware%20Analysis%20-%20Chapter%2010%20Lab%20Write-up%20Jai%20Minton_files/idatloader.jpg" alt="">
      </div>
    
    <h2 class="archive__item-title" itemprop="headline">
      
        <a href="https://www.jaiminton.com/reverse-engineering/idat-loader" rel="permalink">IDAT Loader - Malware Analysis Lab
</a>
      
    </h2>
    
      <p class="page__meta"><svg class="svg-inline--fa fa-clock fa-w-16" aria-hidden="true" focusable="false" data-prefix="far" data-icon="clock" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" data-fa-i2svg=""><path fill="currentColor" d="M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm0 448c-110.5 0-200-89.5-200-200S145.5 56 256 56s200 89.5 200 200-89.5 200-200 200zm61.8-104.4l-84.9-61.7c-3.1-2.3-4.9-5.9-4.9-9.7V116c0-6.6 5.4-12 12-12h32c6.6 0 12 5.4 12 12v141.7l66.8 48.6c5.4 3.9 6.5 11.4 2.6 16.8L334.6 349c-3.9 5.3-11.4 6.5-16.8 2.6z"></path></svg><!-- <i class="far fa-clock" aria-hidden="true"></i> --> 




  39 minute read
</p>
    
    <p class="archive__item-excerpt" itemprop="description">Analysis of IDAT Loader RAT, an advanced malware-as-a-service injector
</p>
  </article>
</div>

        
      </div>
    </div>
  
  
</div>

    </div>

    
      <div class="search-content">
        <div class="search-content__inner-wrap"><input type="text" id="search" class="search-input" tabindex="-1" placeholder="Enter your search term...">
    <div id="results" class="results"></div></div>

      </div>
    

    <div class="page__footer">
      <footer>
        <!-- start custom footer snippets -->

<!-- end custom footer snippets -->
        <div class="page__footer-follow">
  <ul class="social-icons">
    
      <li><strong>Follow:</strong></li>
    

    
      
        
          <li><a href="https://app.hackthebox.com/profile/10636" rel="nofollow noopener noreferrer"><svg class="svg-inline--fa fa-box fa-w-16" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="box" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" data-fa-i2svg=""><path fill="currentColor" d="M509.5 184.6L458.9 32.8C452.4 13.2 434.1 0 413.4 0H272v192h238.7c-.4-2.5-.4-5-1.2-7.4zM240 0H98.6c-20.7 0-39 13.2-45.5 32.8L2.5 184.6c-.8 2.4-.8 4.9-1.2 7.4H240V0zM0 224v240c0 26.5 21.5 48 48 48h416c26.5 0 48-21.5 48-48V224H0z"></path></svg><!-- <i class="fas fa-box" aria-hidden="true"></i> --> Hack The Box</a></li>
        
      
        
          <li><a href="https://twitter.com/CyberRaiju" rel="nofollow noopener noreferrer"><svg class="svg-inline--fa fa-twitter-square fa-w-14 fa-fw" aria-hidden="true" focusable="false" data-prefix="fab" data-icon="twitter-square" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512" data-fa-i2svg=""><path fill="currentColor" d="M400 32H48C21.5 32 0 53.5 0 80v352c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48zm-48.9 158.8c.2 2.8.2 5.7.2 8.5 0 86.7-66 186.6-186.6 186.6-37.2 0-71.7-10.8-100.7-29.4 5.3.6 10.4.8 15.8.8 30.7 0 58.9-10.4 81.4-28-28.8-.6-53-19.5-61.3-45.5 10.1 1.5 19.2 1.5 29.6-1.2-30-6.1-52.5-32.5-52.5-64.4v-.8c8.7 4.9 18.9 7.9 29.6 8.3a65.447 65.447 0 0 1-29.2-54.6c0-12.2 3.2-23.4 8.9-33.1 32.3 39.8 80.8 65.8 135.2 68.6-9.3-44.5 24-80.6 64-80.6 18.9 0 35.9 7.9 47.9 20.7 14.8-2.8 29-8.3 41.6-15.8-4.9 15.2-15.2 28-28.8 36.1 13.2-1.4 26-5.1 37.8-10.2-8.9 13.1-20.1 24.7-32.9 34z"></path></svg><!-- <i class="fab fa-fw fa-twitter-square" aria-hidden="true"></i> --> Twitter</a></li>
        
      
        
          <li><a href="https://www.linkedin.com/in/JaiMinton" rel="nofollow noopener noreferrer"><svg class="svg-inline--fa fa-linkedin fa-w-14" aria-hidden="true" focusable="false" data-prefix="fab" data-icon="linkedin" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512" data-fa-i2svg=""><path fill="currentColor" d="M416 32H31.9C14.3 32 0 46.5 0 64.3v383.4C0 465.5 14.3 480 31.9 480H416c17.6 0 32-14.5 32-32.3V64.3c0-17.8-14.4-32.3-32-32.3zM135.4 416H69V202.2h66.5V416zm-33.2-243c-21.3 0-38.5-17.3-38.5-38.5S80.9 96 102.2 96c21.2 0 38.5 17.3 38.5 38.5 0 21.3-17.2 38.5-38.5 38.5zm282.1 243h-66.4V312c0-24.8-.5-56.7-34.5-56.7-34.6 0-39.9 27-39.9 54.9V416h-66.4V202.2h63.7v29.2h.9c8.9-16.8 30.6-34.5 62.9-34.5 67.2 0 79.7 44.3 79.7 101.9V416z"></path></svg><!-- <i class="fab fa-linkedin" aria-hidden="true"></i> --> LinkedIN</a></li>
        
      
        
          <li><a href="https://github.com/JPMinty" rel="nofollow noopener noreferrer"><svg class="svg-inline--fa fa-github fa-w-16 fa-fw" aria-hidden="true" focusable="false" data-prefix="fab" data-icon="github" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 496 512" data-fa-i2svg=""><path fill="currentColor" d="M165.9 397.4c0 2-2.3 3.6-5.2 3.6-3.3.3-5.6-1.3-5.6-3.6 0-2 2.3-3.6 5.2-3.6 3-.3 5.6 1.3 5.6 3.6zm-31.1-4.5c-.7 2 1.3 4.3 4.3 4.9 2.6 1 5.6 0 6.2-2s-1.3-4.3-4.3-5.2c-2.6-.7-5.5.3-6.2 2.3zm44.2-1.7c-2.9.7-4.9 2.6-4.6 4.9.3 2 2.9 3.3 5.9 2.6 2.9-.7 4.9-2.6 4.6-4.6-.3-1.9-3-3.2-5.9-2.9zM244.8 8C106.1 8 0 113.3 0 252c0 110.9 69.8 205.8 169.5 239.2 12.8 2.3 17.3-5.6 17.3-12.1 0-6.2-.3-40.4-.3-61.4 0 0-70 15-84.7-29.8 0 0-11.4-29.1-27.8-36.6 0 0-22.9-15.7 1.6-15.4 0 0 24.9 2 38.6 25.8 21.9 38.6 58.6 27.5 72.9 20.9 2.3-16 8.8-27.1 16-33.7-55.9-6.2-112.3-14.3-112.3-110.5 0-27.5 7.6-41.3 23.6-58.9-2.6-6.5-11.1-33.3 2.6-67.9 20.9-6.5 69 27 69 27 20-5.6 41.5-8.5 62.8-8.5s42.8 2.9 62.8 8.5c0 0 48.1-33.6 69-27 13.7 34.7 5.2 61.4 2.6 67.9 16 17.7 25.8 31.5 25.8 58.9 0 96.5-58.9 104.2-114.8 110.5 9.2 7.9 17 22.9 17 46.4 0 33.7-.3 75.4-.3 83.6 0 6.5 4.6 14.4 17.3 12.1C428.2 457.8 496 362.9 496 252 496 113.3 383.5 8 244.8 8zM97.2 352.9c-1.3 1-1 3.3.7 5.2 1.6 1.6 3.9 2.3 5.2 1 1.3-1 1-3.3-.7-5.2-1.6-1.6-3.9-2.3-5.2-1zm-10.8-8.1c-.7 1.3.3 2.9 2.3 3.9 1.6 1 3.6.7 4.3-.7.7-1.3-.3-2.9-2.3-3.9-2-.6-3.6-.3-4.3.7zm32.4 35.6c-1.6 1.3-1 4.3 1.3 6.2 2.3 2.3 5.2 2.6 6.5 1 1.3-1.3.7-4.3-1.3-6.2-2.2-2.3-5.2-2.6-6.5-1zm-11.4-14.7c-1.6 1-1.6 3.6 0 5.9 1.6 2.3 4.3 3.3 5.6 2.3 1.6-1.3 1.6-3.9 0-6.2-1.4-2.3-4-3.3-5.6-2z"></path></svg><!-- <i class="fab fa-fw fa-github" aria-hidden="true"></i> --> GitHub</a></li>
        
      
        
          <li><a href="https://www.youtube.com/@cyberraiju/featured" rel="nofollow noopener noreferrer"><svg class="svg-inline--fa fa-youtube fa-w-18 fa-fw" aria-hidden="true" focusable="false" data-prefix="fab" data-icon="youtube" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 576 512" data-fa-i2svg=""><path fill="currentColor" d="M549.655 124.083c-6.281-23.65-24.787-42.276-48.284-48.597C458.781 64 288 64 288 64S117.22 64 74.629 75.486c-23.497 6.322-42.003 24.947-48.284 48.597-11.412 42.867-11.412 132.305-11.412 132.305s0 89.438 11.412 132.305c6.281 23.65 24.787 41.5 48.284 47.821C117.22 448 288 448 288 448s170.78 0 213.371-11.486c23.497-6.321 42.003-24.171 48.284-47.821 11.412-42.867 11.412-132.305 11.412-132.305s0-89.438-11.412-132.305zm-317.51 213.508V175.185l142.739 81.205-142.739 81.201z"></path></svg><!-- <i class="fab fa-fw fa-youtube" aria-hidden="true"></i> --> YouTube</a></li>
        
      
        
          <li><a href="https://infosec.exchange/@CyberRaiju" rel="nofollow noopener noreferrer"><svg class="svg-inline--fa fa-mastodon fa-w-14" aria-hidden="true" focusable="false" data-prefix="fab" data-icon="mastodon" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 417 512" data-fa-i2svg=""><path fill="currentColor" d="M417.8 179.1c0-97.2-63.7-125.7-63.7-125.7-62.5-28.7-228.5-28.4-290.4 0 0 0-63.7 28.5-63.7 125.7 0 115.7-6.6 259.4 105.6 289.1 40.5 10.7 75.3 13 103.3 11.4 50.8-2.8 79.3-18.1 79.3-18.1l-1.7-36.9s-36.3 11.4-77.1 10.1c-40.4-1.4-83-4.4-89.6-54-.6-4.4-.9-9-.9-13.9 85.6 20.9 158.6 9.1 178.7 6.7 56.1-6.7 105-41.3 111.2-72.9 9.8-49.8 9-121.5 9-121.5zm-75.1 125.2h-46.6V190.1c0-49.7-64-51.6-64 6.9v62.5h-46.3V197c0-58.5-64-56.6-64-6.9v114.2H75.1c0-122.1-5.2-147.9 18.4-175 25.9-28.9 79.8-30.8 103.8 6.1l11.6 19.5 11.6-19.5c24.1-37.1 78.1-34.8 103.8-6.1 23.7 27.3 18.4 53 18.4 175z"></path></svg><!-- <i class="fab fa-mastodon" aria-hidden="true"></i> --> Mastodon</a></li>
        
      
        
      
        
      
    
  </ul>  
<div class="page__footer-copyright">© 2024 Jai Minton.</div>

      </div></footer>
    </div>
    <div>
    
  <script src="Practical%20Malware%20Analysis%20-%20Chapter%2010%20Lab%20Write-up%20Jai%20Minton_files/main.min.js"></script>
  <script data-search-pseudo-elements="" defer="defer" src="Practical%20Malware%20Analysis%20-%20Chapter%2010%20Lab%20Write-up%20Jai%20Minton_files/all.js" integrity="sha384-eVEQC9zshBn0rFj4+TU78eNA19HMNigMviK/PU/FFjLXqa/GKPgX58rvt5Z8PLs7" crossorigin="anonymous"></script>




<script src="Practical%20Malware%20Analysis%20-%20Chapter%2010%20Lab%20Write-up%20Jai%20Minton_files/lunr.min.js"></script>
<script src="Practical%20Malware%20Analysis%20-%20Chapter%2010%20Lab%20Write-up%20Jai%20Minton_files/lunr-store.js"></script>
<script src="Practical%20Malware%20Analysis%20-%20Chapter%2010%20Lab%20Write-up%20Jai%20Minton_files/lunr-en.js"></script>



    </div>
  <script>(function(){if (!document.body) return;var js = "window['__CF$cv$params']={r:'8894155f2d293a3a',t:'MTcxNjYyNDk4OC4zNjEwMDA='};_cpo=document.createElement('script');_cpo.nonce='',_cpo.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js',document.getElementsByTagName('head')[0].appendChild(_cpo);";var _0xh = document.createElement('iframe');_0xh.height = 1;_0xh.width = 1;_0xh.style.position = 'absolute';_0xh.style.top = 0;_0xh.style.left = 0;_0xh.style.border = 'none';_0xh.style.visibility = 'hidden';document.body.appendChild(_0xh);function handler() {var _0xi = _0xh.contentDocument || _0xh.contentWindow.document;if (_0xi) {var _0xj = _0xi.createElement('script');_0xj.innerHTML = js;_0xi.getElementsByTagName('head')[0].appendChild(_0xj);}}if (document.readyState !== 'loading') {handler();} else if (window.addEventListener) {document.addEventListener('DOMContentLoaded', handler);} else {var prev = document.onreadystatechange || function () {};document.onreadystatechange = function (e) {prev(e);if (document.readyState !== 'loading') {document.onreadystatechange = prev;handler();}};}})();</script><iframe height="1" width="1" style="position: absolute; top: 0px; left: 0px; border: medium; visibility: hidden;"></iframe><script defer="defer" src="Practical%20Malware%20Analysis%20-%20Chapter%2010%20Lab%20Write-up%20Jai%20Minton_files/vef91dfe02fce4ee0ad053f6de4f175db1715022073587" integrity="sha512-sDIX0kl85v1Cl5tu4WGLZCpH/dV9OHbA4YlKCuCiMmOQIk4buzoYDZSFj+TvC71mOBLh8CDC/REgE0GX0xcbjA==" data-cf-beacon="{&quot;rayId&quot;:&quot;8894155f2d293a3a&quot;,&quot;r&quot;:1,&quot;version&quot;:&quot;2024.4.1&quot;,&quot;token&quot;:&quot;96762cd668614a10963969fc4e520d9b&quot;}" crossorigin="anonymous"></script>


</body></html>